/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã Skills DNA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ‚Üí –æ–±—É—á–µ–Ω–∏–µ ‚Üí –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ ‚Üí –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
 */

const BASE_URL = "https://49c11d52-b1fc-4151-bb61-b9097616c44f-00-3h2ne9cwwtbvn.janeway.replit.dev";

async function makeRequest(method, path, data = null, cookies = '') {
  const url = `${BASE_URL}${path}`;
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
      'Cookie': cookies
    }
  };
  
  if (data) {
    options.body = JSON.stringify(data);
  }
  
  const response = await fetch(url, options);
  const result = await response.text();
  
  return {
    status: response.status,
    headers: response.headers,
    body: result,
    cookies: response.headers.get('set-cookie') || ''
  };
}

function extractCookies(response) {
  const setCookie = response.cookies;
  if (setCookie) {
    return setCookie.split(';')[0];
  }
  return '';
}

async function demonstrateSkillsDnaIntegration() {
  console.log('üéØ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´ SKILLS DNA ===');
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –Ω–∞–≤—ã–∫–æ–≤\n');
  
  try {
    // –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('üîê 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const loginResponse = await makeRequest('POST', '/api/auth/login', {
      username: 'Vitaliy',
      password: '500500–í'
    });
    
    if (loginResponse.status !== 200) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return;
    }
    
    const cookies = extractCookies(loginResponse);
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω\n');
    
    // –®–∞–≥ 2: –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞–≤—ã–∫–æ–≤
    console.log('üìä 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Skills DNA...');
    const initialSkills = await makeRequest('GET', '/api/course-management/skills-summary', null, cookies);
    
    if (initialSkills.status === 200) {
      const initialData = JSON.parse(initialSkills.body);
      console.log(`üìà –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${initialData.summary?.totalSkills || 0} –Ω–∞–≤—ã–∫–æ–≤, —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${initialData.summary?.averageProgress || 0}%`);
      
      if (initialData.summary?.skills?.length > 0) {
        console.log('üß¨ –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:');
        initialData.summary.skills.slice(0, 3).forEach(skill => {
          console.log(`   ‚Ä¢ ${skill.skillName}: ${skill.progress || 0}% (${skill.currentLevel})`);
        });
      }
    }
    console.log('');
    
    // –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—É—Ä—Å–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –Ω–∞–≤—ã–∫–æ–≤
    console.log('‚öôÔ∏è  3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è Python –∫—É—Ä—Å–∞...');
    
    const advancedSkillsConfig = {
      skills: [
        {
          dnaId: 5, // Python –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
          progressGain: 25, // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏—Ä–æ—Å—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞
          bloomLevel: 'application'
        },
        {
          dnaId: 8, // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
          progressGain: 15, // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç –¥–ª—è —Å–º–µ–∂–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞
          bloomLevel: 'knowledge'
        },
        {
          dnaId: 10, // –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
          progressGain: 20, // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –¥–ª—è –º–µ—Ç–∞-–Ω–∞–≤—ã–∫–∞
          bloomLevel: 'application'
        }
      ]
    };
    
    const courseConfig = await makeRequest('POST', '/api/course-management/configure-skills/6', advancedSkillsConfig, cookies);
    console.log(`üéõÔ∏è  –ö—É—Ä—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å ${advancedSkillsConfig.skills.length} –Ω–∞–≤—ã–∫–∞–º–∏`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –∏ –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    const courseInfo = await makeRequest('GET', '/api/course-management/course/6', null, cookies);
    let lessons = [];
    
    if (courseInfo.status === 200) {
      const courseData = JSON.parse(courseInfo.body);
      if (courseData.success && courseData.course?.modules?.length > 0) {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –∏–∑ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
        courseData.course.modules.forEach(module => {
          if (module.lessons) {
            lessons.push(...module.lessons);
          }
        });
        console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${lessons.length} —É—Ä–æ–∫–æ–≤ –≤ –∫—É—Ä—Å–µ "${courseData.course.title}"`);
      }
    }
    console.log('');
    
    // –®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ–º
    console.log('üéØ 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è —É—Ä–æ–∫–æ–≤...');
    
    const lessonSkillConfigs = [
      {
        skills: [
          { dnaId: 5, progressGain: 8, bloomLevel: 'awareness' },    // –í–≤–µ–¥–µ–Ω–∏–µ –≤ Python
          { dnaId: 8, progressGain: 5, bloomLevel: 'awareness' }     // –û—Å–Ω–æ–≤—ã –ª–æ–≥–∏–∫–∏
        ]
      },
      {
        skills: [
          { dnaId: 5, progressGain: 12, bloomLevel: 'knowledge' },   // –°–∏–Ω—Ç–∞–∫—Å–∏—Å Python
          { dnaId: 10, progressGain: 8, bloomLevel: 'knowledge' }    // –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ
        ]
      },
      {
        skills: [
          { dnaId: 5, progressGain: 15, bloomLevel: 'application' }, // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
          { dnaId: 8, progressGain: 10, bloomLevel: 'application' }, // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
          { dnaId: 10, progressGain: 12, bloomLevel: 'application' } // –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á
        ]
      }
    ];
    
    for (let i = 0; i < Math.min(lessons.length, lessonSkillConfigs.length); i++) {
      const lesson = lessons[i];
      const config = lessonSkillConfigs[i];
      
      await makeRequest('POST', `/api/course-management/configure-lesson-skills/${lesson.id}`, config, cookies);
      console.log(`   üìñ –£—Ä–æ–∫ "${lesson.title}" ‚Üí ${config.skills.length} –Ω–∞–≤—ã–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ`);
    }
    console.log('');
    
    // –®–∞–≥ 5: –°–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ Skills DNA
    console.log('üéì 5. –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø');
    console.log('    üí° –ö–∞–∂–¥—ã–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —É—Ä–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç Skills DNA');
    console.log('');
    
    for (let i = 0; i < Math.min(lessons.length, 3); i++) {
      const lesson = lessons[i];
      console.log(`üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞ ${i + 1}: "${lesson.title}"`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –î–û —É—Ä–æ–∫–∞
      const beforeSkills = await makeRequest('GET', '/api/course-management/skills-summary', null, cookies);
      const beforeData = beforeSkills.status === 200 ? JSON.parse(beforeSkills.body) : null;
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º Skills DNA
      const completionResponse = await makeRequest('POST', `/api/course-management/complete-lesson/${lesson.id}`, {}, cookies);
      
      if (completionResponse.status === 200) {
        const result = JSON.parse(completionResponse.body);
        
        if (result.skillsUpdated) {
          console.log('   ‚ú® Skills DNA –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
          if (result.skillsSummary && beforeData?.summary) {
            const afterSkills = result.skillsSummary.skills;
            const beforeSkillsMap = new Map();
            
            if (beforeData.summary.skills) {
              beforeData.summary.skills.forEach(skill => {
                beforeSkillsMap.set(skill.skillName, skill.progress || 0);
              });
            }
            
            console.log('   üìà –î–µ—Ç–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤:');
            afterSkills.forEach(skill => {
              const beforeProgress = beforeSkillsMap.get(skill.skillName) || 0;
              const gain = (skill.progress || 0) - beforeProgress;
              
              if (gain > 0) {
                console.log(`      üéØ ${skill.skillName}: ${beforeProgress}% ‚Üí ${skill.progress}% (+${gain}%)`);
                console.log(`         ‚îî‚îÄ –£—Ä–æ–≤–µ–Ω—å: ${skill.currentLevel}`);
              }
            });
            
            console.log(`   üåü –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${result.skillsSummary.averageProgress}% –ø–æ ${result.skillsSummary.totalSkills} –Ω–∞–≤—ã–∫–∞–º`);
          }
        } else {
          console.log('   ‚ÑπÔ∏è  –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω (–Ω–∞–≤—ã–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞)');
        }
      }
      
      console.log('');
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // –®–∞–≥ 6: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫—É—Ä—Å–∞ —Å –±–æ–Ω—É—Å–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏
    console.log('üèÜ 6. –ó–ê–í–ï–†–®–ï–ù–ò–ï –ö–£–†–°–ê –° –ë–û–ù–£–°–ù–û–ô –°–ò–°–¢–ï–ú–û–ô');
    console.log('    üéÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∑–∞ –ø–æ–ª–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫—É—Ä—Å–∞');
    console.log('');
    
    const courseCompletion = await makeRequest('POST', '/api/course-management/complete-course/6', {}, cookies);
    
    if (courseCompletion.status === 200) {
      try {
        const result = JSON.parse(courseCompletion.body);
        if (result.skillsUpdated) {
          console.log('üéâ –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω –±–æ–Ω—É—Å –∫ Skills DNA!');
          
          if (result.skillsSummary) {
            console.log(`üåü –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result.skillsSummary.averageProgress}% —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å`);
            console.log(`üìä –í—Å–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–æ –Ω–∞–≤—ã–∫–æ–≤: ${result.skillsSummary.totalSkills}`);
            
            console.log('üèÖ –¢–æ–ø –Ω–∞–≤—ã–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞:');
            result.skillsSummary.skills
              .sort((a, b) => (b.progress || 0) - (a.progress || 0))
              .slice(0, 5)
              .forEach((skill, index) => {
                const medal = ['ü•á', 'ü•à', 'ü•â', 'üèÖ', 'üéñÔ∏è'][index] || '‚≠ê';
                console.log(`   ${medal} ${skill.skillName}: ${skill.progress}% (${skill.currentLevel})`);
              });
          }
        }
      } catch (e) {
        console.log('‚úÖ –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      }
    }
    
    // –®–∞–≥ 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ Skills DNA
    console.log('');
    console.log('üìä 7. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê SKILLS DNA');
    
    const finalSkills = await makeRequest('GET', '/api/course-management/skills-summary', null, cookies);
    
    if (finalSkills.status === 200) {
      const finalData = JSON.parse(finalSkills.body);
      
      console.log('üß¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤:');
      console.log(`   üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤: ${finalData.summary?.totalSkills || 0}`);
      console.log(`   üéØ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${finalData.summary?.averageProgress || 0}%`);
      
      if (finalData.summary?.skills?.length > 0) {
        console.log('');
        console.log('üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–∞–≤—ã–∫–æ–≤:');
        
        const skillsByCategory = {
          'Programming': [],
          'Analytics': [],
          'Problem Solving': []
        };
        
        finalData.summary.skills.forEach(skill => {
          if (skill.skillName.includes('Python') || skill.skillName.includes('–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ')) {
            skillsByCategory['Programming'].push(skill);
          } else if (skill.skillName.includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') || skill.skillName.includes('–º–∞—Ç–µ–º–∞—Ç')) {
            skillsByCategory['Analytics'].push(skill);
          } else {
            skillsByCategory['Problem Solving'].push(skill);
          }
        });
        
        Object.entries(skillsByCategory).forEach(([category, skills]) => {
          if (skills.length > 0) {
            const avgProgress = Math.round(skills.reduce((sum, skill) => sum + (skill.progress || 0), 0) / skills.length);
            console.log(`   üíº ${category}: ${avgProgress}% —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å`);
            skills.forEach(skill => {
              console.log(`      ‚îî‚îÄ ${skill.skillName}: ${skill.progress}% (${skill.currentLevel})`);
            });
          }
        });
      }
    }
    
    console.log('');
    console.log('üéØ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===');
    console.log('‚ú® –°–∏—Å—Ç–µ–º–∞ Skills DNA –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–∫–∞');
    console.log('üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ –Ω–∞–≤—ã–∫–æ–≤');
    console.log('üéì –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤ –∏ Skills DNA —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    console.log('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
demonstrateSkillsDnaIntegration();