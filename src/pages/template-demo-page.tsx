import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import MicroLessonStructureNew from '@/components/courses/micro-lesson-structure-new';

/**
 * Демонстрационная страница для новых шаблонов микроурока
 */
const TemplateDemoPage: React.FC = () => {
  // Пример структуры микроурока для демонстрации шаблонов
  const demoStructure = {
    id: 999,
    lessonId: 999,
    hookTitle: "Искусственный интеллект: на границе возможного",
    hook: `<p>Представьте себе технологию, способную писать стихи, создавать искусство, решать сложнейшие научные проблемы и даже вести с вами увлекательную беседу. Еще десять лет назад это могло показаться научной фантастикой, но сегодня мы стоим на пороге новой эры — эры искусственного интеллекта.</p>
    
    <p>В 2023 году ChatGPT достиг отметки в <strong>100 миллионов</strong> активных пользователей всего за 2 месяца, став самым быстрорастущим приложением в истории. Это неудивительно — ведь современные системы ИИ используются в здравоохранении, образовании, бизнесе и многих других сферах, меняя наш подход к решению проблем.</p>
    
    <p>В этом курсе мы погрузимся в удивительный мир искусственного интеллекта и разберёмся, как именно эта технология работает и почему она так важна для нашего будущего.</p>`,
    hookImage: "https://images.unsplash.com/photo-1620712943543-bcc4688e7485?q=80&w=1965&auto=format&fit=crop",
    
    explainTitle: "Что такое искусственный интеллект?",
    explain: `<p>Искусственный интеллект (ИИ) — это область компьютерной науки, нацеленная на создание систем, способных выполнять задачи, которые обычно требуют человеческого интеллекта.</p>
    
    <p>В основе современных ИИ-систем лежат алгоритмы машинного обучения, которые позволяют компьютерам "учиться" на огромных массивах данных и выявлять в них закономерности. Чем больше данных обрабатывает система, тем точнее становятся её предсказания и выводы.</p>
    
    <h3>Типы искусственного интеллекта:</h3>
    <ul>
      <li><strong>Узкий ИИ (Artificial Narrow Intelligence, ANI)</strong> — системы, созданные для выполнения конкретных задач. Например, шахматные программы, системы распознавания лиц или голосовые помощники.</li>
      <li><strong>Общий ИИ (Artificial General Intelligence, AGI)</strong> — гипотетическая система, способная выполнять любые интеллектуальные задачи на уровне человека или превосходящем его. Такого ИИ пока не существует.</li>
      <li><strong>Сверхразум (Artificial Super Intelligence, ASI)</strong> — гипотетический ИИ, значительно превосходящий возможности человека во всех областях. Существует только в теории и научной фантастике.</li>
    </ul>
    
    <p>Сегодня мы живём в эпоху узкого ИИ, но развитие технологий происходит стремительно. Большие языковые модели (LLM) вроде GPT-4 демонстрируют всё более впечатляющие способности, приближая нас к созданию более общего искусственного интеллекта.</p>`,
    
    keyPoints: [
      "Искусственный интеллект — это технология, позволяющая компьютерам выполнять задачи, требующие человеческого интеллекта",
      "Современные ИИ-системы основаны на алгоритмах машинного обучения, которые учатся на больших объемах данных",
      "На сегодняшний день существует только узкий ИИ, способный решать конкретные задачи",
      "Большие языковые модели (LLM) представляют собой значительный шаг вперед в развитии технологий ИИ"
    ],
    
    demoTitle: "Как работает машинное обучение на примере",
    demo: `<p>Чтобы лучше понять принцип работы машинного обучения, рассмотрим простой пример классификации изображений.</p>
    
    <h3>Пример: Распознавание кошек и собак</h3>
    
    <p>Представим, что мы хотим создать ИИ, который умеет отличать фотографии кошек от фотографий собак. Вот как это работает:</p>
    
    <ol>
      <li><strong>Сбор данных</strong>: Мы собираем тысячи изображений кошек и собак.</li>
      <li><strong>Предобработка</strong>: Изображения преобразуются в числовые массивы, где каждый пиксель представлен числом.</li>
      <li><strong>Обучение</strong>: Нейронная сеть анализирует эти числовые массивы и их метки (кошка/собака) и начинает выявлять закономерности.</li>
      <li><strong>Тестирование</strong>: Мы проверяем точность модели на новых изображениях, которые она раньше не видела.</li>
      <li><strong>Использование</strong>: Теперь модель может классифицировать новые фотографии самостоятельно.</li>
    </ol>
    
    <p>В процессе обучения нейронная сеть автоматически выявляет такие признаки, как форма ушей, длина морды, текстура шерсти и другие характеристики, которые помогают различать эти два вида животных.</p>
    
    <p>Аналогичный принцип лежит в основе работы современных языковых моделей, но они оперируют не пикселями, а токенами (фрагментами текста) и выявляют закономерности в человеческом языке.</p>`,
    
    demoCode: `# Пример кода классификатора изображений на Python с TensorFlow

import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt

# Создаем модель свёрточной нейронной сети
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(512, activation='relu'),
    layers.Dense(1, activation='sigmoid')  # 1 выход: 0 - кошка, 1 - собака
])

# Компилируем модель
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# В реальности здесь был бы код загрузки и обработки данных
# train_generator, validation_generator = ...

# Обучаем модель
# history = model.fit(train_generator, 
#                    epochs=15,
#                    validation_data=validation_generator)

# Тестируем на новом изображении
# img = ... # загрузка тестового изображения
# prediction = model.predict(img)
# result = "Собака" if prediction > 0.5 else "Кошка"
# print(f"Модель определила, что на фото: {result}")`,
    
    externalLinks: [
      { url: "https://www.tensorflow.org/tutorials/images/classification", title: "TensorFlow: Классификация изображений" },
      { url: "https://course.fast.ai/", title: "Практический курс по deep learning" },
      { url: "https://playground.tensorflow.org/", title: "Интерактивная демонстрация нейросети" }
    ],
    
    quickTryTitle: "Создаем простой классификатор текста",
    quickTry: `<p>Давайте попробуем понять принцип работы классификации текста на простом примере. Мы создадим мысленный эксперимент, как бы компьютер мог определять эмоциональную окраску (положительную или отрицательную) короткого текстового отзыва.</p>
    
    <h3>Как бы это работало:</h3>
    
    <p>1. Мы бы создали список "положительных" и "отрицательных" слов:</p>
    <p>Положительные: "хороший", "отличный", "великолепный", "рекомендую", "понравился"...</p>
    <p>Отрицательные: "плохой", "ужасный", "разочарован", "жаль", "проблема"...</p>
    
    <p>2. Для каждого отзыва мы бы считали количество положительных и отрицательных слов.</p>
    
    <p>3. Если положительных слов больше — отзыв позитивный, если отрицательных больше — негативный.</p>`,
    
    quickTryTask: `<p>Попробуйте классифицировать следующие отзывы, используя простой подход подсчета положительных и отрицательных слов:</p>
    
    <ol>
      <li>"Очень хороший фильм, актеры играли великолепно."</li>
      <li>"Ужасное обслуживание, больше сюда не приду."</li>
      <li>"Фильм был интересным, но слишком длинным и местами скучным."</li>
    </ol>
    
    <p>Подумайте, как бы вы классифицировали последний отзыв? В чем ограничения такого простого подхода?</p>`,
    
    reflectTitle: "Размышления о будущем искусственного интеллекта",
    reflect: `<p>Теперь, когда мы познакомились с основами ИИ и принципами его работы, давайте поразмышляем о том, как эта технология может изменить нашу жизнь в ближайшем будущем и какие вызовы она ставит перед обществом.</p>
    
    <p>Искусственный интеллект развивается стремительными темпами. Всего за несколько лет мы перешли от относительно простых систем машинного обучения к сложным языковым моделям, способным писать тексты, создавать изображения и вести диалог почти как люди.</p>
    
    <p>Но вместе с возможностями появляются и новые этические, социальные и экономические вопросы. Как общество должно регулировать ИИ? Какие профессии могут быть автоматизированы? Какие навыки будут востребованы в мире, где ИИ берет на себя все больше когнитивной работы?</p>`,
    
    reflectQuestions: [
      "Как вы думаете, какие сферы человеческой деятельности больше всего изменятся под влиянием ИИ в ближайшие 5-10 лет?",
      "Какие навыки, на ваш взгляд, останутся уникально человеческими даже при развитом ИИ?",
      "Какие этические проблемы могут возникнуть при массовом внедрении систем искусственного интеллекта?",
      "Как вы лично планируете адаптироваться к миру, где ИИ становится все более распространенным?"
    ]
  };

  // Пример прогресса пользователя
  const demoProgress = {
    userId: 10,
    lessonId: 999,
    hookCompleted: true,
    explainCompleted: false,
    demoCompleted: false,
    quickTryCompleted: false,
    reflectCompleted: false,
    lastVisitedSection: 'hook'
  };

  // Обработчики для демонстрации
  const handleProgressUpdate = async (progress: any) => {
    console.log('Progress updated:', progress);
    return Promise.resolve();
  };

  const handleComplete = () => {
    console.log('Lesson completed!');
  };

  return (
    <div className="container mx-auto py-8 px-4">
      <h1 className="text-3xl font-bold text-center mb-2">Демонстрация новых шаблонов микроуроков</h1>
      <p className="text-center text-white/60 mb-6">Визуализация структуры с космической тематикой</p>
      
      <Separator className="my-8" />
      
      <Card className="border border-space-700">
        <CardContent className="p-6">
          <MicroLessonStructureNew 
            lessonId={999}
            structure={demoStructure}
            userProgress={demoProgress}
            onProgressUpdate={handleProgressUpdate}
            onComplete={handleComplete}
          />
        </CardContent>
      </Card>
    </div>
  );
};

export default TemplateDemoPage;