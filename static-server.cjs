/**
 * –£–ª—å—Ç—Ä–∞ –ø—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Replit
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä –±–µ–∑ API
 */

const express = require('express');
const path = require('path');
const fs = require('fs');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç –∏ –ø—É—Ç–∏
const PORT = process.env.PORT || 3000;
const DIST_DIR = path.join(__dirname, 'dist', 'public');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è
if (!fs.existsSync(DIST_DIR)) {
  console.log('‚ö†Ô∏è –§–∞–π–ª—ã —Å–±–æ—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –°–æ–∑–¥–∞—é placeholder...');
  fs.mkdirSync(DIST_DIR, { recursive: true });
  const html = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NovaAI University</title>
  <style>
    body {
      font-family: system-ui, sans-serif;
      background: #0f172a;
      color: #f1f5f9;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      text-align: center;
    }
    .container {
      max-width: 600px;
      padding: 2rem;
      background: rgba(30, 41, 59, 0.7);
      border-radius: 8px;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    }
    h1 { margin-top: 0; color: #38bdf8; }
    code {
      background: #334155;
      padding: 0.2rem 0.4rem;
      border-radius: 4px;
      font-family: monospace;
      font-size: 0.9rem;
    }
    .steps { text-align: left; line-height: 1.6; }
    .steps p { margin: 0.5rem 0; }
  </style>
</head>
<body>
  <div class="container">
    <h1>üöÄ NovaAI University</h1>
    <p>–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Ñ–∞–π–ª—ã —Å–±–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
    <div class="steps">
      <p>–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</p>
      <p>1. –°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: <code>npm run build</code></p>
      <p>2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: <code>node static-server.cjs</code></p>
    </div>
    <p>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ <code>DEPLOY.md</code></p>
  </div>
</body>
</html>
  `;
  fs.writeFileSync(path.join(DIST_DIR, 'index.html'), html);
}

// –°–æ–∑–¥–∞–µ–º Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MIME-—Ç–∏–ø—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
app.use((req, res, next) => {
  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
  
  if (req.method !== 'GET' && req.method !== 'HEAD') {
    return next();
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL-–ø—É—Ç—å –≤ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
  let filePath = req.path;
  if (filePath === '/') {
    filePath = '/index.html';
  }
  
  // –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
  const fullPath = path.join(DIST_DIR, filePath);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
  if (!fs.existsSync(fullPath)) {
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404
    if (path.extname(filePath) !== '') {
      return res.status(404).send('File not found');
    }
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –º–∞—Ä—à—Ä—É—Ç SPA (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º index.html
    return res.sendFile(path.join(DIST_DIR, 'index.html'), {
      headers: {
        'Content-Type': 'text/html; charset=UTF-8'
      }
    });
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
  const ext = path.extname(filePath).toLowerCase();
  let contentType = 'text/plain';
  
  switch(ext) {
    case '.html': 
      contentType = 'text/html; charset=UTF-8';
      break;
    case '.css':
      contentType = 'text/css; charset=UTF-8';
      break;
    case '.js':
      contentType = 'application/javascript; charset=UTF-8';
      break;
    case '.json':
      contentType = 'application/json; charset=UTF-8';
      break;
    case '.png':
      contentType = 'image/png';
      break;
    case '.jpg':
    case '.jpeg':
      contentType = 'image/jpeg';
      break;
    case '.gif':
      contentType = 'image/gif';
      break;
    case '.svg':
      contentType = 'image/svg+xml; charset=UTF-8';
      break;
    case '.ico':
      contentType = 'image/x-icon';
      break;
    case '.woff':
      contentType = 'font/woff';
      break;
    case '.woff2':
      contentType = 'font/woff2';
      break;
    case '.ttf':
      contentType = 'font/ttf';
      break;
    case '.otf':
      contentType = 'font/otf';
      break;
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Type –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
  res.setHeader('Content-Type', contentType);
  fs.createReadStream(fullPath).pipe(res);
});

// API –∑–∞–≥–ª—É—à–∫–∏
app.all('/api/*', (req, res) => {
  res.setHeader('Content-Type', 'application/json; charset=UTF-8');
  res.status(503).json({
    status: 'unavailable',
    message: 'API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–ø–ª–æ—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ npm run dev –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.'
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('Server error:', err);
  res.status(500).send('Internal Server Error');
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, '0.0.0.0', () => {
  console.log(`
=========================================================
üöÄ NovaAI University | –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!
=========================================================
üåê –ü–æ—Ä—Ç: ${PORT}
üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${DIST_DIR}
üîó URL: ${process.env.REPL_SLUG 
  ? `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co` 
  : `http://localhost:${PORT}`}
=========================================================
  `);
});