/**
 * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Replit
 * —Å –º–∏–Ω–∏–º—É–º–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —á–µ—Ç–∫–∏–º–∏ MIME-—Ç–∏–ø–∞–º–∏
 */

// –ò–º–ø–æ—Ä—Ç—ã ES modules –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
import express from 'express';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';

// –ü–æ–ª—É—á–∞–µ–º __dirname –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç –∏ –ø—É—Ç–∏
const PORT = process.env.PORT || 3000;
const DIST_DIR = path.join(__dirname, 'dist', 'public');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è
if (!fs.existsSync(DIST_DIR)) {
  console.log('‚ö†Ô∏è –§–∞–π–ª—ã —Å–±–æ—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –°–æ–∑–¥–∞—é placeholder...');
  fs.mkdirSync(DIST_DIR, { recursive: true });
  const html = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NovaAI University</title>
  <style>
    body {
      font-family: system-ui, sans-serif;
      background: #0f172a;
      color: #f1f5f9;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      text-align: center;
    }
    .container {
      max-width: 600px;
      padding: 2rem;
      background: rgba(30, 41, 59, 0.7);
      border-radius: 8px;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    }
    h1 { margin-top: 0; color: #38bdf8; }
    code {
      background: #334155;
      padding: 0.2rem 0.4rem;
      border-radius: 4px;
      font-family: monospace;
      font-size: 0.9rem;
    }
    .steps { text-align: left; line-height: 1.6; }
    .steps p { margin: 0.5rem 0; }
  </style>
</head>
<body>
  <div class="container">
    <h1>üöÄ NovaAI University</h1>
    <p>–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Ñ–∞–π–ª—ã —Å–±–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
    <div class="steps">
      <p>–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</p>
      <p>1. –°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: <code>npm run build</code></p>
      <p>2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: <code>node replit-deploy.js</code></p>
    </div>
    <p>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ <code>deployment-guide.md</code></p>
  </div>
</body>
</html>
  `;
  fs.writeFileSync(path.join(DIST_DIR, 'index.html'), html);
}

// –°–æ–∑–¥–∞–µ–º Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MIME-—Ç–∏–ø—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
const mimeTypes = {
  '.html': 'text/html; charset=UTF-8',
  '.css': 'text/css; charset=UTF-8',
  '.js': 'application/javascript; charset=UTF-8',
  '.json': 'application/json; charset=UTF-8',
  '.svg': 'image/svg+xml; charset=UTF-8',
  '.png': 'image/png',
  '.jpg': 'image/jpeg',
  '.jpeg': 'image/jpeg',
  '.gif': 'image/gif',
  '.ico': 'image/x-icon',
  '.woff': 'font/woff',
  '.woff2': 'font/woff2',
  '.ttf': 'font/ttf',
  '.otf': 'font/otf',
  '.eot': 'application/vnd.ms-fontobject'
};

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å —è–≤–Ω—ã–º–∏ MIME-—Ç–∏–ø–∞–º–∏
app.use((req, res, next) => {
  if (req.method !== 'GET' && req.method !== 'HEAD') {
    return next();
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
  const filePath = path.join(DIST_DIR, req.path === '/' ? 'index.html' : req.path);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  fs.access(filePath, fs.constants.F_OK, (err) => {
    if (err) {
      // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç SPA
      if (req.path.includes('.')) {
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º, –≤–µ—Ä–Ω–µ–º 404
        return res.status(404).send('File not found');
      }
      
      // –ò–Ω–∞—á–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ –º–∞—Ä—à—Ä—É—Ç SPA –∏ –æ—Ç–¥–∞–µ–º index.html
      const indexPath = path.join(DIST_DIR, 'index.html');
      const ext = '.html';
      
      if (mimeTypes[ext]) {
        res.setHeader('Content-Type', mimeTypes[ext]);
      }
      
      return fs.createReadStream(indexPath).pipe(res);
    }
    
    // –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –æ—Ç–¥–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME —Ç–∏–ø–æ–º
    const ext = path.extname(filePath).toLowerCase();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MIME-—Ç–∏–ø
    if (mimeTypes[ext]) {
      res.setHeader('Content-Type', mimeTypes[ext]);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    fs.createReadStream(filePath).pipe(res);
  });
});

// –†–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
app.get('/healthz', (req, res) => {
  res.setHeader('Content-Type', 'application/json; charset=UTF-8');
  res.json({ status: 'ok', time: new Date().toISOString() });
});

// API –∑–∞–≥–ª—É—à–∫–∏
app.all('/api/*', (req, res) => {
  res.setHeader('Content-Type', 'application/json; charset=UTF-8');
  res.status(503).json({
    status: 'unavailable',
    message: 'API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–ø–ª–æ—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ npm run dev –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.'
  });
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('Server error:', err);
  res.status(500).send('Internal Server Error');
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, '0.0.0.0', () => {
  console.log(`
================================================
üöÄ NovaAI University | –î–µ–ø–ª–æ–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!
================================================
üåê –ü–æ—Ä—Ç: ${PORT}
üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${DIST_DIR}
üîó URL: https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co
================================================
  `);
});