#!/usr/bin/env node

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º –Ω–∞ Vercel
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∏–ª—è–º–∏ –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
 */

import { execSync } from 'child_process';
import fs from 'fs';

const log = (msg, color = 'white') => {
  const colors = {
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    red: '\x1b[31m',
    blue: '\x1b[34m',
    white: '\x1b[37m',
    reset: '\x1b[0m'
  };
  console.log(`${colors[color]}${msg}${colors.reset}`);
};

function checkBuildOutput() {
  log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–±–æ—Ä–∫–∏...', 'blue');
  
  if (fs.existsSync('dist/public')) {
    log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ dist/public (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è Vercel)', 'green');
    return 'dist/public';
  } else if (fs.existsSync('dist')) {
    log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ dist (–Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)', 'yellow');
    return 'dist';
  } else {
    log('‚ùå –ù–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤', 'red');
    return null;
  }
}

function rebuildeProject() {
  log('üèóÔ∏è  –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...', 'blue');
  
  try {
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–±–æ—Ä–∫–∏
    if (fs.existsSync('dist')) {
      fs.rmSync('dist', { recursive: true, force: true });
    }
    
    // –ù–æ–≤–∞—è —Å–±–æ—Ä–∫–∞
    execSync('npm run build', { stdio: 'inherit' });
    log('‚úÖ –ü—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω', 'green');
    return true;
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏', 'red');
    return false;
  }
}

function updateVercelConfig() {
  log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ vercel.json...', 'blue');
  
  const vercelConfig = {
    "version": 2,
    "buildCommand": "npm run build",
    "outputDirectory": "dist/public",
    "installCommand": "npm install",
    "framework": "vite",
    "rewrites": [
      {
        "source": "/api/(.*)",
        "destination": "https://49c11d52-b1fc-4151-bb61-b9097616c44f-00-3h2ne9cwwtbvn.janeway.replit.dev/api/$1"
      },
      {
        "source": "/(.*)",
        "destination": "/index.html"
      }
    ],
    "headers": [
      {
        "source": "/assets/(.*)",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "public, max-age=31536000, immutable"
          }
        ]
      },
      {
        "source": "/(.*\\.(css|js))",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "public, max-age=31536000, immutable"
          }
        ]
      }
    ]
  };

  fs.writeFileSync('vercel.json', JSON.stringify(vercelConfig, null, 2));
  log('‚úÖ vercel.json –æ–±–Ω–æ–≤–ª–µ–Ω', 'green');
}

function commitChanges() {
  log('üì§ –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Git...', 'blue');
  
  try {
    execSync('git add .', { stdio: 'inherit' });
    execSync('git commit -m "Fix Vercel deployment configuration"', { stdio: 'inherit' });
    execSync('git push', { stdio: 'inherit' });
    log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Git', 'green');
  } catch (error) {
    log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ Git –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π)', 'yellow');
  }
}

function redeployToVercel() {
  log('üöÄ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Vercel...', 'blue');
  
  try {
    execSync('vercel --prod', { stdio: 'inherit' });
    log('‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'green');
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è', 'red');
    log('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é: vercel --prod', 'yellow');
  }
}

function showDebuggingTips() {
  log('\nüîß –°–û–í–ï–¢–´ –ü–û –û–¢–õ–ê–î–ö–ï:', 'blue');
  log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Developer Tools –≤ –±—Ä–∞—É–∑–µ—Ä–µ (F12)', 'yellow');
  log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∫–ª–∞–¥–∫—É Network –Ω–∞ –æ—à–∏–±–∫–∏ 404', 'yellow');
  log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ CSS —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è', 'yellow');
  log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Console –Ω–∞ –æ—à–∏–±–∫–∏ JavaScript', 'yellow');
  
  log('\nüìä –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –î–ï–ü–õ–û–Ø:', 'blue');
  log('‚Ä¢ –°—Ç–∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'white');
  log('‚Ä¢ API –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏', 'white');
  log('‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'white');
  log('‚Ä¢ Skills DNA –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç', 'white');
}

function main() {
  log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å Vercel —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º\n', 'blue');
  
  const buildOutput = checkBuildOutput();
  
  if (!buildOutput) {
    if (!rebuildeProject()) {
      process.exit(1);
    }
  }
  
  updateVercelConfig();
  commitChanges();
  redeployToVercel();
  showDebuggingTips();
  
  log('\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!', 'green');
  log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à —Å–∞–π—Ç –Ω–∞ Vercel —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç', 'white');
}

main();