/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π NovaAI University
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É—á–∞—â–∏—Ö—Å—è
 */

import http from 'http';
import querystring from 'querystring';

const BASE_URL = 'http://localhost:3000';

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(method, path, data = null, cookies = '') {
  return new Promise((resolve, reject) => {
    const postData = data ? JSON.stringify(data) : null;
    
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Cookie': cookies
      }
    };

    if (postData) {
      options.headers['Content-Length'] = Buffer.byteLength(postData);
    }

    const req = http.request(options, (res) => {
      let body = '';
      
      res.on('data', (chunk) => {
        body += chunk;
      });
      
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          body: body
        });
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (postData) {
      req.write(postData);
    }
    
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è cookies
function extractCookies(response) {
  const setCookie = response.headers['set-cookie'];
  if (!setCookie) return '';
  
  return setCookie.map(cookie => cookie.split(';')[0]).join('; ');
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
async function testPlatformFunctions() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã NovaAI University\n');
  
  const results = {
    authentication: { status: 'unknown', details: [] },
    courses: { status: 'unknown', details: [] },
    skillsDNA: { status: 'unknown', details: [] },
    diagnosis: { status: 'unknown', details: [] },
    labHub: { status: 'unknown', details: [] },
    aiAssistant: { status: 'unknown', details: [] },
    progress: { status: 'unknown', details: [] }
  };

  try {
    // 1. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
    console.log('üìù 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const authStatus = await makeRequest('GET', '/api/auth/me');
    console.log(`   –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${authStatus.statusCode}`);
    results.authentication.details.push(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: ${authStatus.statusCode}`);
    
    if (authStatus.statusCode === 401) {
      results.authentication.status = 'working';
      results.authentication.details.push('–°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é');
    }

    // 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ê–õ–û–ì–ê –ö–£–†–°–û–í
    console.log('\nüìö 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫—É—Ä—Å–æ–≤');
    
    const coursesResponse = await makeRequest('GET', '/api/courses');
    console.log(`   –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤: ${coursesResponse.statusCode}`);
    results.courses.details.push(`–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: ${coursesResponse.statusCode}`);
    
    if (coursesResponse.statusCode === 200) {
      try {
        const courses = JSON.parse(coursesResponse.body);
        console.log(`   –ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤: ${courses.length}`);
        results.courses.details.push(`–î–æ—Å—Ç—É–ø–Ω–æ –∫—É—Ä—Å–æ–≤: ${courses.length}`);
        
        if (courses.length > 0) {
          const sampleCourse = courses[0];
          console.log(`   –ü—Ä–∏–º–µ—Ä –∫—É—Ä—Å–∞: "${sampleCourse.title}"`);
          results.courses.details.push(`–ü—Ä–∏–º–µ—Ä: "${sampleCourse.title}"`);
          results.courses.status = 'working';
        } else {
          results.courses.status = 'empty';
        }
      } catch (e) {
        results.courses.status = 'error';
        results.courses.details.push('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON');
      }
    } else {
      results.courses.status = 'error';
    }

    // 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SKILLS DNA
    console.log('\nüß¨ 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Skills DNA');
    
    const skillsMapResponse = await makeRequest('GET', '/api/skills/map');
    console.log(`   –ö–∞—Ä—Ç–∞ –Ω–∞–≤—ã–∫–æ–≤: ${skillsMapResponse.statusCode}`);
    results.skillsDNA.details.push(`–ö–∞—Ä—Ç–∞ –Ω–∞–≤—ã–∫–æ–≤: ${skillsMapResponse.statusCode}`);
    
    const userSkillsResponse = await makeRequest('GET', '/api/skills/user');
    console.log(`   –ù–∞–≤—ã–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userSkillsResponse.statusCode}`);
    results.skillsDNA.details.push(`–ù–∞–≤—ã–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userSkillsResponse.statusCode}`);
    
    if (userSkillsResponse.statusCode === 200) {
      results.skillsDNA.status = 'working';
    } else {
      results.skillsDNA.status = 'error';
    }

    // 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
    console.log('\nüîç 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const diagnosisDemo = await makeRequest('GET', '/api/diagnosis/progress/999');
    console.log(`   –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–¥–µ–º–æ): ${diagnosisDemo.statusCode}`);
    results.diagnosis.details.push(`–î–µ–º–æ-—Ä–µ–∂–∏–º: ${diagnosisDemo.statusCode}`);
    
    const diagnosisSummary = await makeRequest('GET', '/api/diagnosis/summary/999');
    console.log(`   –°–≤–æ–¥–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${diagnosisSummary.statusCode}`);
    results.diagnosis.details.push(`–°–≤–æ–¥–∫–∞: ${diagnosisSummary.statusCode}`);
    
    if (diagnosisDemo.statusCode === 200 || diagnosisSummary.statusCode === 200) {
      results.diagnosis.status = 'working';
    } else {
      results.diagnosis.status = 'error';
    }

    // 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LAB HUB
    console.log('\nüß™ 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Lab Hub');
    
    // Lab Hub –æ–±—ã—á–Ω–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    results.labHub.status = 'static';
    results.labHub.details.push('–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ UI');

    // 6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ê–°–°–ò–°–¢–ï–ù–¢–ê
    console.log('\nü§ñ 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
    
    const aiChatResponse = await makeRequest('GET', '/api/ai-assistant/conversations');
    console.log(`   –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞: ${aiChatResponse.statusCode}`);
    results.aiAssistant.details.push(`–ò—Å—Ç–æ—Ä–∏—è: ${aiChatResponse.statusCode}`);
    
    if (aiChatResponse.statusCode === 200 || aiChatResponse.statusCode === 401) {
      results.aiAssistant.status = 'working';
    } else {
      results.aiAssistant.status = 'error';
    }

    // 7. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ì–†–ï–°–°–ê –û–ë–£–ß–ï–ù–ò–Ø
    console.log('\nüìä 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
    
    const userProgressResponse = await makeRequest('GET', '/api/courses/user');
    console.log(`   –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userProgressResponse.statusCode}`);
    results.progress.details.push(`–ü—Ä–æ–≥—Ä–µ—Å—Å –∫—É—Ä—Å–æ–≤: ${userProgressResponse.statusCode}`);
    
    const timelineResponse = await makeRequest('GET', '/api/learning-events/timeline');
    console.log(`   –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è: ${timelineResponse.statusCode}`);
    results.progress.details.push(`–í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è: ${timelineResponse.statusCode}`);
    
    if (timelineResponse.statusCode === 200) {
      results.progress.status = 'working';
    } else if (userProgressResponse.statusCode === 401) {
      results.progress.status = 'requires_auth';
    } else {
      results.progress.status = 'error';
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }

  // –û–¢–ß–ï–¢ –û –†–ï–ó–£–õ–¨–¢–ê–¢–ê–•
  console.log('\n' + '='.repeat(60));
  console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ü–õ–ê–¢–§–û–†–ú–´');
  console.log('='.repeat(60));
  
  Object.entries(results).forEach(([component, result]) => {
    const statusEmoji = {
      'working': '‚úÖ',
      'requires_auth': 'üîê',
      'static': 'üìÑ',
      'empty': '‚ö†Ô∏è',
      'error': '‚ùå',
      'unknown': '‚ùì'
    };
    
    console.log(`\n${statusEmoji[result.status]} ${component.toUpperCase()}: ${result.status}`);
    result.details.forEach(detail => {
      console.log(`   ${detail}`);
    });
  });

  console.log('\n' + '='.repeat(60));
  console.log('üìå –†–ï–ó–Æ–ú–ï:');
  
  const workingComponents = Object.values(results).filter(r => r.status === 'working').length;
  const totalComponents = Object.keys(results).length;
  
  console.log(`–†–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${workingComponents}/${totalComponents}`);
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:');
  
  if (results.courses.status === 'empty') {
    console.log('‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
  }
  
  if (results.diagnosis.status === 'error') {
    console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
  }
  
  if (results.aiAssistant.status === 'error') {
    console.log('‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å OpenAI API –∫–ª—é—á –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
  }
  
  console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testPlatformFunctions().catch(console.error);