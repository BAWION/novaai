Ключевые разрывы и проблемы
Узел стыковки	Проблема	Последствие для UX
Диагностика → Skills DNA	Результаты кладутся во временный sessionStorage, но в БД/Skills DNA почти не пишутся	Пользователь «проходит» тест, а контент не меняется
Skills DNA → ИИ‑агент	getUserProfile() и getLearningProgress() используют моки	Рекомендации кажутся случайными, KPI персонализации = 0
ИИ‑агент → UI / БД	saveRecommendations() только логирует	Нельзя показать историю советов, нечего анализировать для адаптации
Авторизация	Потеря cookie/сессии после перезагрузки	Пользователь внезапно «выходит», прогресс не фиксируется
/api/courses/recommended	404	Блок «Рекомендовано лично вам» пустует
Observability	Нет трейсинга и error‑логов на клиенте	Сложно отлавливать интеграционные баги

Технический риск‑профиль
Риск	Вероятность	Влияние	Что сделать
Сложная схема БД + ORM: Drizzle‑модели ≠ фактические миграции	Средняя	Высокое — потеря данных	Прогнать drizzle-kit push --preview, выровнять типы
OpenAI rate‑limit при первых живых пользователях	Высокая	Среднее	Кэш + стратегия exponential back‑off, логирование ошибок
Frontend state‑management: React‑query vs локальный контекст	Средняя	Среднее	Зафиксировать единый слой «gateway hooks» к API
Mon repo на Replit (API + SPA в одном процессе)	Низкая	Низкое	Долгосрочно вынести API на отдельный сервис

Рекомендованный фокус на 2 ближайших спринта
Замкнуть цикл данных

писать результаты диагностики сразу в skills_dna,

маппинг skill_to_dna_mapping → user_skills_dna_progress,

отказаться от sessionStorage как от одиночного источника правды.

Подружить ИИ‑агента с реальными данными

реализовать реальные SELECT вместо моков в ai-agent-service.ts,

завести таблицу user_recommendations (user_id, payload JSONB, created_at),

отрисовать виджет «Следующий шаг» в личном кабинете.

Починить сессии / стабильный логин

проверить настройки express-session + connect-pg-simple,

включить cookie.sameSite='lax', увеличить maxAge,

добавить refresh на клиенте (silent re‑auth).

Обсервация и логи

Frontend: window.onerror, Sentry/LogRocket,

Backend: pino + middleware timing → stdout.

Минимальная визуализация Skills DNA

радар‑чарт (react-d3-radar) с 5‑7 компетенциями,

прогресс из user_skills_dna_progress в %‑ах.