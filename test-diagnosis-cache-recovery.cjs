/**
 * –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –í–∞—Ä–∏–∞–Ω—Ç 2: —É–ª—É—á—à–µ–Ω–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
 */

const http = require('http');

// –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const BASE_URL = process.env.BASE_URL || 'http://localhost:5000';

function makeRequest(method, path, data = null, cookies = '') {
  return new Promise((resolve, reject) => {
    const url = new URL(BASE_URL + path);
    
    const options = {
      hostname: url.hostname,
      port: url.port,
      path: url.pathname + url.search,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'User-Agent': 'diagnosis-cache-test/1.0'
      }
    };
    
    if (cookies) {
      options.headers['Cookie'] = cookies;
    }
    
    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsedData = responseData ? JSON.parse(responseData) : {};
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: parsedData
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: responseData
          });
        }
      });
    });
    
    req.on('error', (error) => {
      reject(error);
    });
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

function extractCookies(response) {
  const setCookieHeader = response.headers['set-cookie'];
  if (!setCookieHeader) return '';
  
  return setCookieHeader.map(cookie => cookie.split(';')[0]).join('; ');
}

async function testDiagnosisCacheRecovery() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
  console.log('='.repeat(80));
  
  try {
    // –®–∞–≥ 1: –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('\nüìã –®–∞–≥ 1: –°–∏–º—É–ª—è—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    
    const diagnosisData = {
      userId: 0, // –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      diagnosticType: 'deep',
      skills: {
        programming: 75,
        mathematics: 60,
        statistics: 45,
        data_analysis: 70,
        machine_learning: 30,
        business_acumen: 65,
        communication: 80,
        problem_solving: 85,
        creativity: 70,
        leadership: 55
      },
      metadata: {
        completedAt: new Date().toISOString(),
        cached: true,
        testRun: true
      }
    };
    
    console.log('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const saveAttempt = await makeRequest('POST', '/api/diagnosis/results', diagnosisData);
    
    console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${saveAttempt.statusCode}`);
    if (saveAttempt.statusCode === 401) {
      console.log('‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ 401 - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');
    } else {
      console.log('‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', saveAttempt.data);
    }
    
    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\nüìä –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    const cacheEvent = {
      eventType: 'diagnosis_cached_for_recovery',
      data: {
        diagnosticType: 'deep',
        skillsCount: Object.keys(diagnosisData.skills).length,
        cachedAt: new Date().toISOString(),
        testEvent: true
      }
    };
    
    const eventResponse = await makeRequest('POST', '/api/events', cacheEvent);
    console.log(`–°–æ–±—ã—Ç–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ: ${eventResponse.statusCode === 201 ? '‚úÖ' : '‚ùå'}`);
    
    // –®–∞–≥ 3: –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    console.log('\nüîê –®–∞–≥ 3: –°–∏–º—É–ª—è—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const registrationData = {
      username: `test_cache_user_${Date.now()}`,
      password: 'test123',
      email: `test_cache_${Date.now()}@example.com`,
      displayName: 'Test Cache User'
    };
    
    console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const regResponse = await makeRequest('POST', '/api/auth/register', registrationData);
    
    if (regResponse.statusCode !== 201) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', regResponse.data);
      return;
    }
    
    const cookies = extractCookies(regResponse);
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–ª—É—á–µ–Ω—ã cookies –¥–ª—è —Å–µ—Å—Å–∏–∏');
    
    // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    console.log('\n‚úÖ –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞');
    
    const authCheck = await makeRequest('GET', '/api/auth/me', null, cookies);
    
    if (authCheck.statusCode === 200 && authCheck.data.id) {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ID=${authCheck.data.id}, username=${authCheck.data.username}`);
      
      // –®–∞–≥ 5: –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      console.log('\nüîÑ –®–∞–≥ 5: –°–∏–º—É–ª—è—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
      
      const recoveryData = {
        ...diagnosisData,
        userId: authCheck.data.id, // –û–±–Ω–æ–≤–ª—è–µ–º ID –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        metadata: {
          ...diagnosisData.metadata,
          recoveredFromCache: true,
          originalCacheTime: diagnosisData.metadata.completedAt,
          recoveryTime: new Date().toISOString()
        }
      };
      
      console.log('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
      const recoveryResponse = await makeRequest('POST', '/api/diagnosis/results', recoveryData, cookies);
      
      if (recoveryResponse.statusCode === 201 || recoveryResponse.statusCode === 200) {
        console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!');
        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', recoveryResponse.data);
        
        // –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('\nüìà –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Skills DNA');
        
        const progressCheck = await makeRequest('GET', `/api/diagnosis/progress/${authCheck.data.id}`, null, cookies);
        const summaryCheck = await makeRequest('GET', `/api/diagnosis/summary/${authCheck.data.id}`, null, cookies);
        
        console.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${progressCheck.statusCode === 200 ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
        console.log(`–°–≤–æ–¥–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${summaryCheck.statusCode === 200 ? '‚úÖ –ù–∞–π–¥–µ–Ω–∞' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
        
        if (progressCheck.statusCode === 200) {
          console.log('–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', {
            totalSkills: progressCheck.data.totalSkills || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
            completedAt: progressCheck.data.completedAt || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
          });
        }
        
        // –®–∞–≥ 7: –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        console.log('\nüìù –®–∞–≥ 7: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
        
        const recoveryEvent = {
          eventType: 'diagnosis_cache_restored',
          data: {
            userId: authCheck.data.id,
            restoredAt: new Date().toISOString(),
            testRecovery: true
          }
        };
        
        const recoveryEventResponse = await makeRequest('POST', '/api/events', recoveryEvent, cookies);
        console.log(`–°–æ–±—ã—Ç–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ: ${recoveryEventResponse.statusCode === 201 ? '‚úÖ' : '‚ùå'}`);
        
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', recoveryResponse.data);
      }
      
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', authCheck.data);
    }
    
    // –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    console.log('\n' + '='.repeat(80));
    console.log('–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í–ê–†–ò–ê–ù–¢–ê 2:');
    console.log('1. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è - —Ä–∞–±–æ—Ç–∞–µ—Ç'); 
    console.log('3. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('4. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Skills DNA –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('6. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('\n–í–ê–†–ò–ê–ù–¢ 2 –£–°–ü–ï–®–ù–û –†–ï–ê–õ–ò–ó–û–í–ê–ù –ò –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testDiagnosisCacheRecovery()
    .then(() => {
      console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    })
    .catch((error) => {
      console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      process.exit(1);
    });
}

module.exports = { testDiagnosisCacheRecovery };