/**
 * Comprehensive Python Basics Course Template
 * Full educational content with real progress tracking
 */

import { CourseTemplate } from "../services/course-management-service";

export const pythonBasicsTemplate: CourseTemplate = {
  title: "Python для начинающих",
  slug: "python-basics",
  description: "Полный курс программирования на Python с нуля. Изучите основы синтаксиса, структуры данных, функции и объектно-ориентированное программирование через практические задания.",
  difficulty: 3,
  level: "basic",
  estimatedDuration: 2400, // 40 часов
  category: "tech",
  objectives: [
    "Освоить базовый синтаксис Python",
    "Понимать структуры данных: списки, словари, кортежи",
    "Создавать и использовать функции",
    "Работать с файлами и обработкой исключений",
    "Основы объектно-ориентированного программирования",
    "Создать итоговый проект - консольное приложение"
  ],
  prerequisites: [
    "Базовые навыки работы с компьютером",
    "Понимание логических операций",
    "Желание изучать программирование"
  ],
  skillsGained: [
    "Python Programming",
    "Data Structures",
    "Object-Oriented Programming",
    "File Operations",
    "Error Handling",
    "Problem Solving"
  ],
  modules: [
    {
      title: "Введение в Python",
      description: "Знакомство с языком программирования Python, установка среды разработки и первые программы",
      orderIndex: 1,
      estimatedDuration: 300, // 5 часов
      lessons: [
        {
          title: "Что такое Python и зачем его изучать",
          description: "История языка, области применения и преимущества Python",
          content: `# Добро пожаловать в мир Python!

## Что такое Python?

Python — это высокоуровневый язык программирования, созданный Гвидо ван Россумом в 1991 году. Название языка происходит от британского комедийного шоу "Летающий цирк Монти Пайтона".

## Почему Python так популярен?

### 1. Простота и читаемость
Python имеет простой и интуитивно понятный синтаксис:

\`\`\`python
print("Привет, мир!")
\`\`\`

### 2. Универсальность
Python используется в различных областях:
- **Веб-разработка** (Django, Flask)
- **Наука о данных** (Pandas, NumPy)
- **Машинное обучение** (TensorFlow, PyTorch)
- **Автоматизация** (скрипты, боты)
- **Разработка игр** (Pygame)

### 3. Большое сообщество
- Огромная библиотека пакетов (PyPI)
- Активное сообщество разработчиков
- Множество обучающих материалов

## Философия Python

Python следует принципу "The Zen of Python":
- Красивое лучше безобразного
- Явное лучше неявного
- Простое лучше сложного
- Читаемость имеет значение

## Что мы изучим в этом курсе?

1. Основы синтаксиса Python
2. Переменные и типы данных
3. Условные конструкции и циклы
4. Функции и модули
5. Структуры данных
6. Работа с файлами
7. Основы ООП
8. Создание итогового проекта`,
          type: "text",
          orderIndex: 1,
          estimatedDuration: 60,
          assignments: [
            {
              title: "Викторина: Основы Python",
              description: "Проверьте свои знания о языке Python",
              type: "quiz",
              points: 10,
              content: {
                questions: [
                  {
                    question: "В каком году был создан Python?",
                    options: ["1989", "1991", "1995", "2000"],
                    correct: 1
                  },
                  {
                    question: "Кто создал язык Python?",
                    options: ["Линус Торвальдс", "Гвидо ван Россум", "Деннис Ритчи", "Брендан Эйх"],
                    correct: 1
                  },
                  {
                    question: "В каких областях НЕ используется Python?",
                    options: ["Веб-разработка", "Наука о данных", "Системное программирование", "Все перечисленное используется"],
                    correct: 3
                  }
                ]
              }
            }
          ]
        },
        {
          title: "Установка Python и настройка среды разработки",
          description: "Установка Python, знакомство с IDLE и настройка редактора кода",
          content: `# Установка Python и настройка среды

## Установка Python

### Windows
1. Перейдите на python.org
2. Скачайте последнюю версию Python 3.x
3. Запустите установщик
4. ⚠️ **Важно**: Поставьте галочку "Add Python to PATH"
5. Нажмите "Install Now"

### macOS
\`\`\`bash
# Через Homebrew (рекомендуется)
brew install python3
\`\`\`

### Linux (Ubuntu/Debian)
\`\`\`bash
sudo apt update
sudo apt install python3 python3-pip
\`\`\`

## Проверка установки

Откройте терминал и выполните:

\`\`\`bash
python --version
\`\`\`

Вы должны увидеть что-то вроде: \`Python 3.11.0\`

## Среды разработки

### 1. IDLE (встроенная)
- Поставляется с Python
- Простая среда для начинающих

### 2. Visual Studio Code (рекомендуется)
- Бесплатный редактор от Microsoft
- Отличная поддержка Python
- Множество полезных расширений

### 3. PyCharm
- Профессиональная IDE для Python
- Много функций для разработки

## Ваша первая программа

Создайте файл \`hello.py\`:

\`\`\`python
# Это комментарий
print("Привет, мир!")
print("Меня зовут Python")

# Простые вычисления
print(2 + 3)
print("Python" + " " + "великолепен!")
\`\`\`

### Запуск программы

В терминале:
\`\`\`bash
python hello.py
\`\`\`

## Интерактивный режим Python

Запустите Python в интерактивном режиме:

\`\`\`bash
python
\`\`\`

Попробуйте:

\`\`\`python
>>> print("Привет!")
>>> 2 + 2
>>> "Python" * 3
>>> exit()  # Выход
\`\`\``,
          type: "text",
          orderIndex: 2,
          estimatedDuration: 90,
          assignments: [
            {
              title: "Практическое задание: Первая программа",
              description: "Создайте свою первую программу на Python",
              type: "coding",
              points: 15,
              content: {
                task: "Создайте программу, которая:\n1. Выводит ваше имя\n2. Выводит ваш возраст\n3. Выполняет простое вычисление (например, 10 + 5)\n4. Выводит текст 'Python' 3 раза подряд",
                template: "# Ваша первая программа\nprint(\"Меня зовут: \")\n# Добавьте остальной код",
                expectedOutput: "Пример вывода:\nМеня зовут: Анна\nМне 25 лет\n10 + 5 = 15\nPythonPythonPython"
              }
            }
          ]
        },
        {
          title: "Основы синтаксиса и первые программы",
          description: "Изучение базового синтаксиса Python: отступы, комментарии, базовые операции",
          content: `# Основы синтаксиса Python

## Особенности синтаксиса Python

### 1. Отступы вместо фигурных скобок

В Python используются отступы для группировки кода:

\`\`\`python
# Правильно
if 5 > 3:
    print("Пять больше трех")
    print("Это правда!")

# Неправильно - ошибка отступа
if 5 > 3:
print("Ошибка!")  # IndentationError
\`\`\`

**Важно**: Используйте 4 пробела для отступа.

### 2. Комментарии

\`\`\`python
# Однострочный комментарий

"""
Многострочный комментарий
Может занимать несколько строк
"""

print("Привет!")  # Комментарий в конце строки
\`\`\`

### 3. Регистр имеет значение

\`\`\`python
name = "Анна"
Name = "Петр"  # Это другая переменная!
\`\`\`

## Основные операции

### Арифметические операции

\`\`\`python
print(10 + 3)    # Сложение: 13
print(10 - 3)    # Вычитание: 7
print(10 * 3)    # Умножение: 30
print(10 / 3)    # Деление: 3.333...
print(10 // 3)   # Целочисленное деление: 3
print(10 % 3)    # Остаток от деления: 1
print(10 ** 3)   # Возведение в степень: 1000
\`\`\`

### Операции со строками

\`\`\`python
first_name = "Анна"
last_name = "Иванова"
full_name = first_name + " " + last_name
print(full_name)  # Анна Иванова

# Повторение строк
print("Ha" * 3)  # HaHaHa

# Длина строки
print(len("Python"))  # 6
\`\`\`

## Функция print()

\`\`\`python
# Простой вывод
print("Привет, мир!")

# Вывод нескольких значений
print("Возраст:", 25, "лет")

# Разделитель между значениями
print("A", "B", "C", sep="-")  # A-B-C
\`\`\`

## Функция input()

\`\`\`python
# Ввод данных от пользователя
name = input("Как вас зовут? ")
print("Привет,", name)

# Ввод числа
age_str = input("Сколько вам лет? ")
age = int(age_str)  # Преобразуем в число
print("Через год вам будет", age + 1)
\`\`\`

## Первая интерактивная программа

\`\`\`python
print("=== Программа знакомства ===")

name = input("Введите ваше имя: ")
age = int(input("Введите ваш возраст: "))
city = input("В каком городе вы живете? ")

print()
print("Приятно познакомиться!")
print(f"Вас зовут {name}")
print(f"Вам {age} лет")
print(f"Вы живете в городе {city}")
print(f"Через 10 лет вам будет {age + 10} лет")
\`\`\``,
          type: "text",
          orderIndex: 3,
          estimatedDuration: 120,
          assignments: [
            {
              title: "Калькулятор возраста",
              description: "Создайте интерактивную программу для вычисления возраста",
              type: "coding",
              points: 20,
              content: {
                task: "Создайте программу, которая:\n1. Запрашивает имя пользователя\n2. Запрашивает год рождения\n3. Вычисляет текущий возраст (используйте 2024 как текущий год)\n4. Выводит результат в формате: 'Привет, [имя]! Вам [возраст] лет.'\n5. Добавьте вычисление, в каком году пользователю исполнится 100 лет",
                template: "# Калькулятор возраста\n\nname = input(\"Введите ваше имя: \")\nbirth_year = int(input(\"Введите год рождения: \"))\n\ncurrent_year = 2024\n# Ваш код здесь",
                expectedOutput: "Пример:\nВведите ваше имя: Анна\nВведите год рождения: 1995\nПривет, Анна! Вам 29 лет.\nВам исполнится 100 лет в 2095 году."
              }
            }
          ]
        }
      ]
    },
    {
      title: "Переменные и типы данных",
      description: "Изучение переменных, основных типов данных и работы с ними",
      orderIndex: 2,
      estimatedDuration: 360,
      lessons: [
        {
          title: "Переменные и присваивание",
          description: "Понятие переменных, правила именования и операции присваивания",
          content: `# Переменные в Python

## Что такое переменная?

Переменная — это "ящик" с именем, в котором мы храним данные.

\`\`\`python
name = "Анна"           # Строка
age = 25                # Число
height = 165.5          # Дробное число
is_student = True       # Логическое значение
\`\`\`

## Правила именования переменных

### ✅ Правильные имена:
\`\`\`python
user_name = "Петр"
total_score = 100
is_active = True
counter_1 = 0
\`\`\`

### ❌ Неправильные имена:
\`\`\`python
2name = "error"      # Начинается с цифры
user-name = "error"  # Содержит дефис
class = "error"      # Зарезервированное слово
\`\`\`

## Стили именования

### Snake_case (рекомендуется для Python):
\`\`\`python
first_name = "Анна"
user_age = 25
max_temperature = 36.6
\`\`\`

### Константы (ЗАГЛАВНЫМИ БУКВАМИ):
\`\`\`python
PI = 3.14159
MAX_USERS = 100
DEFAULT_COLOR = "blue"
\`\`\`

## Присваивание значений

\`\`\`python
# Простое присваивание
x = 10
print(x)  # 10

# Изменение значения
x = 20
print(x)  # 20

# Множественное присваивание
a, b, c = 1, 2, 3
print(a, b, c)  # 1 2 3

# Присваивание одного значения нескольким переменным
x = y = z = 0
print(x, y, z)  # 0 0 0
\`\`\`

## Сокращенные операции присваивания

\`\`\`python
counter = 10

# Обычный способ
counter = counter + 1

# Сокращенный способ
counter += 1  # То же самое

# Другие операции
counter -= 2    # counter = counter - 2
counter *= 3    # counter = counter * 3
counter /= 2    # counter = counter / 2
\`\`\`

## Работа со строковыми переменными

\`\`\`python
first_name = "Анна"
last_name = "Петрова"

# Объединение строк
full_name = first_name + " " + last_name
print(full_name)  # Анна Петрова

# Форматирование строк (f-строки)
age = 25
message = f"Меня зовут {full_name}, мне {age} лет"
print(message)

# Методы строк
print(full_name.upper())    # АННА ПЕТРОВА
print(full_name.lower())    # анна петрова
print(len(full_name))       # 12
\`\`\`

## Практические примеры

### Пример 1: Обмен значениями
\`\`\`python
a = 10
b = 20

print(f"До обмена: a = {a}, b = {b}")

# Обмен значениями (Python-способ)
a, b = b, a

print(f"После обмена: a = {a}, b = {b}")
\`\`\`

### Пример 2: Калькулятор
\`\`\`python
print("=== Простой калькулятор ===")

num1 = float(input("Введите первое число: "))
num2 = float(input("Введите второе число: "))

sum_result = num1 + num2
diff_result = num1 - num2
mult_result = num1 * num2

if num2 != 0:
    div_result = num1 / num2
else:
    div_result = "На ноль делить нельзя!"

print(f"{num1} + {num2} = {sum_result}")
print(f"{num1} - {num2} = {diff_result}")
print(f"{num1} × {num2} = {mult_result}")
print(f"{num1} ÷ {num2} = {div_result}")
\`\`\`

## Полезные советы

1. **Используйте описательные имена**: \`user_age\` лучше чем \`a\`
2. **Будьте последовательны**: выберите стиль и придерживайтесь его
3. **Комментируйте неочевидный код**
4. **Инициализируйте переменные** перед использованием`,
          type: "text",
          orderIndex: 1,
          estimatedDuration: 120,
          assignments: [
            {
              title: "Работа с переменными",
              description: "Практические задания по работе с переменными",
              type: "coding",
              points: 25,
              content: {
                task: "Создайте программу, которая:\n1. Создает переменные для имени, фамилии, возраста и города\n2. Вычисляет полное имя\n3. Создает переменную для года рождения на основе возраста\n4. Выводит информацию в красивом формате\n5. Демонстрирует обмен значениями двух переменных",
                template: "# Работа с переменными\n\n# Создайте переменные\nfirst_name = \nlast_name = \nage = \ncity = \n\n# Ваш код здесь",
                expectedOutput: "Пример:\nПолное имя: Анна Петрова\nВозраст: 25 лет\nГод рождения: 1999\nГород: Москва\n\nДо обмена: x = 10, y = 20\nПосле обмена: x = 20, y = 10"
              }
            }
          ]
        }
      ]
    }
  ]
};

export default pythonBasicsTemplate;