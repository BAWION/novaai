/**
 * –ü—Ä–æ—Å—Ç–æ–π –µ–¥–∏–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è NovaAI University
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç API –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ –æ–¥–Ω–æ–º –ø–æ—Ä—Ç—É 5000
 */

const express = require('express');
const path = require('path');
const fs = require('fs');

const app = express();
const PORT = 5000;

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
const users = new Map();
const sessions = new Map();

// Middleware
app.use(express.json());
app.use(express.static('dist'));

// CORS –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  res.header('Access-Control-Allow-Credentials', 'true');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).send();
  }
  next();
});

// API Routes

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/auth/register', (req, res) => {
  const { username, email, password } = req.body;
  
  if (!username || !email || !password) {
    return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }
  
  if (users.has(email)) {
    return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
  }
  
  const user = {
    id: Date.now(),
    username,
    email,
    password, // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å
    createdAt: new Date().toISOString()
  };
  
  users.set(email, user);
  
  // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
  const sessionId = Math.random().toString(36).substring(7);
  sessions.set(sessionId, { userId: user.id, email });
  
  console.log(`[AUTH] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);
  
  res.json({
    success: true,
    user: { id: user.id, username, email },
    sessionId
  });
});

// –í—Ö–æ–¥
app.post('/api/auth/login', (req, res) => {
  const { email, password } = req.body;
  
  if (!email || !password) {
    return res.status(400).json({ error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }
  
  const user = users.get(email);
  if (!user || user.password !== password) {
    return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
  }
  
  // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
  const sessionId = Math.random().toString(36).substring(7);
  sessions.set(sessionId, { userId: user.id, email });
  
  console.log(`[AUTH] –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);
  
  res.json({
    success: true,
    user: { id: user.id, username: user.username, email },
    sessionId
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.get('/api/auth/me', (req, res) => {
  const sessionId = req.headers.authorization?.replace('Bearer ', '');
  
  if (!sessionId || !sessions.has(sessionId)) {
    return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }
  
  const session = sessions.get(sessionId);
  const user = users.get(session.email);
  
  if (!user) {
    return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  res.json({
    success: true,
    user: { id: user.id, username: user.username, email: user.email }
  });
});

// –ü—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∫—É—Ä—Å–æ–≤
app.get('/api/courses', (req, res) => {
  res.json({
    success: true,
    courses: [
      {
        id: 1,
        title: "AI Literacy 101",
        description: "–û—Å–Ω–æ–≤—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
        duration: "120 –º–∏–Ω—É—Ç"
      },
      {
        id: 2, 
        title: "Python Basics",
        description: "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python",
        duration: "180 –º–∏–Ω—É—Ç"
      }
    ]
  });
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.get('*', (req, res) => {
  const indexPath = path.join(__dirname, 'dist', 'index.html');
  
  if (fs.existsSync(indexPath)) {
    res.sendFile(indexPath);
  } else {
    res.status(404).send('Application not built. Run: npm run build');
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
  console.log(`\nüöÄ NovaAI University –∑–∞–ø—É—â–µ–Ω!`);
  console.log(`üìç –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:${PORT}`);
  console.log(`üåê –°–µ—Ç—å: http://0.0.0.0:${PORT}`);
  console.log(`\n‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:`);
  console.log(`   POST /api/auth/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è`);
  console.log(`   POST /api/auth/login - –í—Ö–æ–¥`);
  console.log(`   GET /api/auth/me - –ü—Ä–æ—Ñ–∏–ª—å`);
  console.log(`   GET /api/courses - –ö—É—Ä—Å—ã`);
  console.log(`\nüì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.size}, –°–µ—Å—Å–∏–∏: ${sessions.size}\n`);
});