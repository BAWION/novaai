/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö username Telegram –±–æ—Ç–∞
 * –ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username –¥–ª—è Telegram Login Widget
 */

const possibleUsernames = [
  'galaxion_auth_bot',
  'GalaxionAuthBot', 
  'galaxion_bot',
  'GalaxionBot',
  'galaxionauth_bot',
  'GalaxionAuth_Bot'
];

async function testTelegramBotToken() {
  const token = process.env.TELEGRAM_AUTH_BOT_TOKEN;
  
  if (!token) {
    console.log('‚ùå TELEGRAM_AUTH_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ environment');
    return;
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ —á–µ—Ä–µ–∑ API
    const response = await fetch(`https://api.telegram.org/bot${token}/getMe`);
    const data = await response.json();
    
    if (data.ok) {
      console.log('‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω!');
      console.log(`üìù Username: @${data.result.username}`);
      console.log(`üë§ –ò–º—è: ${data.result.first_name}`);
      console.log(`üÜî ID: ${data.result.id}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º username
      updateLoginPageWithCorrectUsername(data.result.username);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ API:', data.description);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
  }
}

function updateLoginPageWithCorrectUsername(username) {
  console.log(`\nüîß –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ username: ${username}`);
  console.log(`\n–î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–¥:\nscript.setAttribute('data-telegram-login', '${username}');`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testTelegramBotToken();