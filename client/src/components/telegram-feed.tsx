import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from '@/components/ui/alert';
import { ExternalLink, MessageCircle, Clock, Eye, AlertTriangle } from "lucide-react";

interface TelegramPost {
  id: string;
  text: string;
  date: string;
  views?: number;
  link: string;
  media?: {
    type: 'photo' | 'video';
    url: string;
  };
}

interface MockTelegramPost {
  id: string;
  text: string;
  date: string;
  views: number;
  link: string;
}

export default function TelegramFeed() {
  const [posts, setPosts] = useState<TelegramPost[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchTelegramPosts = async () => {
    try {
      const response = await fetch('/api/telegram/channel/humanreadytech/posts?limit=10');
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (data.success && data.posts && data.posts.length > 0) {
        setPosts(data.posts);
        setError(null); // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        setLoading(false);
        return true; // –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
      } else {
        console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        return false;
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Telegram:', err);
      return false;
    }
  };

  useEffect(() => {
    const loadInitialData = async () => {
      const success = await fetchTelegramPosts();
      
      if (!success) {
        // Fallback –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        const mockPosts: MockTelegramPost[] = [
          {
            id: "1",
            text: "üöÄ –ù–æ–≤—ã–π –ø—Ä–æ—Ä—ã–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò: OpenAI –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ GPT-5 —Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è. –ú–æ–¥–µ–ª—å —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏.\n\n#–ò–ò #OpenAI #GPT5 #–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            date: "2025-06-23T20:30:00Z",
            views: 1250,
            link: "https://t.me/humanreadytech/1"
          },
          {
            id: "2", 
            text: "üìä –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–ª–æ, —á—Ç–æ 78% –∫–æ–º–ø–∞–Ω–∏–π –ø–ª–∞–Ω–∏—Ä—É—é—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –ò–ò –≤ 2025 –≥–æ–¥—É. –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (45%)\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ (32%)\n‚Ä¢ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (28%)\n‚Ä¢ –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (25%)\n\n#–ë–∏–∑–Ω–µ—Å–ò–ò #–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ #–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
            date: "2025-06-23T18:15:00Z",
            views: 890,
            link: "https://t.me/humanreadytech/2"
          },
          {
            id: "3",
            text: "üéØ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –¥–Ω—è: –ü—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ data augmentation! –≠—Ç–æ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –Ω–∞ 15-20% –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n–û—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è:\n‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞\n‚úÖ –ê—É–¥–∏–æ –∞–Ω–∞–ª–∏–∑–∞\n\n#–ú–∞—à–∏–Ω–Ω–æ–µ–û–±—É—á–µ–Ω–∏–µ #DataScience #–ù–µ–π—Ä–æ–Ω–Ω—ã–µ–°–µ—Ç–∏",
            date: "2025-06-23T16:45:00Z", 
            views: 634,
            link: "https://t.me/humanreadytech/3"
          },
          {
            id: "4",
            text: "ü§ñ Anthropic –≤—ã–ø—É—Å—Ç–∏–ª–∞ Claude 3.5 Sonnet —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç:\n\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –∫–æ–¥–æ–≤—ã–µ –±–∞–∑—ã\n‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –±–∞–≥–∏\n‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã\n\n–£–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏? –î–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏! üëá\n\n#Claude #Anthropic #–ò–ò–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
            date: "2025-06-23T14:20:00Z",
            views: 1456,
            link: "https://t.me/humanreadytech/4"
          },
          {
            id: "5",
            text: "üìà –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Ä—ã–Ω–æ–∫ –ò–ò-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—ã—Ä–æ—Å –Ω–∞ 240% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥. –õ—é–¥–∏ –∞–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—é—Ç:\n\n1. Prompt Engineering (35%)\n2. Machine Learning –æ—Å–Ω–æ–≤—ã (28%)\n3. Computer Vision (18%)\n4. NLP (12%)\n5. –≠—Ç–∏–∫–∞ –ò–ò (7%)\n\n–ê —á—Ç–æ –∏–∑—É—á–∞–µ—Ç–µ –≤—ã? üéì\n\n#–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–ò–ò #–û–±—É—á–µ–Ω–∏–µ #CareerInAI",
            date: "2025-06-23T12:00:00Z",
            views: 723,
            link: "https://t.me/humanreadytech/5"
          }
        ];
        
        setPosts(mockPosts);
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.");
      }
      
      setLoading(false);
    };

    loadInitialData();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    const interval = setInterval(async () => {
      await fetchTelegramPosts();
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

    return () => clearInterval(interval);
  }, []);

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffHours / 24);

    if (diffHours < 1) {
      const diffMinutes = Math.floor(diffMs / (1000 * 60));
      return `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    } else if (diffHours < 24) {
      return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    } else if (diffDays < 7) {
      return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
    } else {
      return date.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'short'
      });
    }
  };

  const formatViews = (views: number) => {
    if (views >= 1000) {
      return `${(views / 1000).toFixed(1)}k`;
    }
    return views.toString();
  };

  const extractHashtags = (text: string) => {
    const hashtags = text.match(/#[\w–ê-–Ø–∞-—è—ë]+/g) || [];
    return hashtags.slice(0, 3); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ö–µ—à—Ç–µ–≥–∞
  };

  const getCleanText = (text: string) => {
    // –£–±–∏—Ä–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ –∏–∑ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    return text.replace(/#[\w–ê-–Ø–∞-—è—ë]+/g, '').trim();
  };

  if (loading) {
    return (
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <MessageCircle className="h-5 w-5 text-blue-500" />
            –õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π @humanreadytech
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {[1, 2, 3].map((i) => (
              <div key={i} className="animate-pulse">
                <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                <div className="h-4 bg-gray-200 rounded w-1/2 mb-2"></div>
                <div className="h-3 bg-gray-200 rounded w-1/4"></div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <MessageCircle className="h-5 w-5 text-blue-500" />
          –õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π @humanreadytech
        </CardTitle>
      </CardHeader>
      <CardContent>
        {error && error.includes("–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ") && (
          <Alert className="mb-4">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}
        
        {posts && posts.length > 0 ? (
          <div className="space-y-4">
            {posts.map((post) => (
              <Card key={post.id} className="border-l-4 border-l-blue-500">
                <CardContent className="p-4">
                  <div className="flex justify-between items-start mb-3">
                    <div className="flex items-center gap-2 text-sm text-muted-foreground">
                      <Clock className="h-4 w-4" />
                      {formatDate(post.date)}
                    </div>
                    {post.views && (
                      <div className="flex items-center gap-1 text-sm text-muted-foreground">
                        <Eye className="h-4 w-4" />
                        {formatViews(post.views)}
                      </div>
                    )}
                  </div>
                  
                  <p className="text-sm leading-relaxed mb-3">
                    {getCleanText(post.text)}
                  </p>
                  
                  <div className="flex flex-wrap gap-1 mb-3">
                    {extractHashtags(post.text).map((hashtag, index) => (
                      <Badge key={index} variant="secondary" className="text-xs">
                        {hashtag}
                      </Badge>
                    ))}
                  </div>
                  
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => window.open(post.link, '_blank')}
                    className="text-xs"
                  >
                    <ExternalLink className="h-3 w-3 mr-1" />
                    –ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <div className="text-center py-8">
            <MessageCircle className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
            <p className="text-muted-foreground mb-4">–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
            <Button 
              variant="outline" 
              onClick={() => window.open('https://t.me/humanreadytech', '_blank')}
            >
              <ExternalLink className="h-4 w-4 mr-2" />
              –û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª –≤ Telegram
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
}