import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from '@/components/ui/alert';
import { ExternalLink, MessageCircle, Clock, Eye, AlertTriangle } from "lucide-react";

interface TelegramPost {
  id: string;
  text: string;
  date: string;
  views?: number;
  link: string;
  media?: {
    type: 'photo' | 'video';
    url: string;
  };
}

interface MockTelegramPost {
  id: string;
  text: string;
  date: string;
  views: number;
  link: string;
}

export default function TelegramFeed() {
  const [posts, setPosts] = useState<TelegramPost[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchTelegramPosts = async () => {
    try {
      const response = await fetch('/api/telegram/channel/humanreadytech/posts?limit=10');
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (data.success && data.posts && data.posts.length > 0) {
        setPosts(data.posts);
        setError(null); // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        setLoading(false);
        return true; // –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
      } else {
        console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        return false;
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Telegram:', err);
      return false;
    }
  };

  useEffect(() => {
    const loadInitialData = async () => {
      const success = await fetchTelegramPosts();
      
      if (!success) {
        // Fallback –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        const now = new Date();
        const mockPosts: MockTelegramPost[] = [
          {
            id: "demo_1",
            text: "üöÄ –í –∞—Å—Ç—Ä–æ–Ω–æ–º–∏–∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è! –£—á—ë–Ω—ã–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–ø—É—Å–∫ –≥–∏–≥–∞–Ω—Ç—Å–∫–æ–≥–æ —Ç–µ–ª–µ—Å–∫–æ–ø–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–ø–æ—Å–æ–±–µ–Ω –±—É–¥–µ—Ç ¬´–≤–∏–¥–µ—Ç—å¬ª –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ 10 —Ä–∞–∑ –±–æ–ª—å—à–µ –Ω–µ–±–µ—Å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, —á–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–ª–µ—Å–∫–æ–ø—ã. –≠—Ç–æ –æ—Ç–∫—Ä–æ–µ—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–æ—Å–º–æ—Å–∞ –∏ –ø–æ–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –º–Ω–æ–≥–∏–µ –∑–∞–≥–∞–¥–∫–∏ –æ –í—Å–µ–ª–µ–Ω–Ω–æ–π.",
            date: new Date(now.getTime() - 2 * 60 * 60 * 1000).toISOString(), // 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            views: 1250,
            link: "https://t.me/humanreadytech/demo1"
          },
          {
            id: "demo_2", 
            text: "–ö 2025 –≥–æ–¥—É –Ω–∞–≤—ã–∫ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –≥—Ä–∞–º–æ—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Å—Ç–∞–Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –¥–∞–∂–µ —Ç–µ–º, –∫—Ç–æ –¥–∞–ª—ë–∫ –æ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –£–º–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Ç–∞–∫—É—é –∂–µ –±–∞–∑–æ–≤—É—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é, –∫–∞–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏–ª–∏ –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã –∑–∞ –ü–ö.",
            date: new Date(now.getTime() - 6 * 60 * 60 * 1000).toISOString(), // 6 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
            views: 890,
            link: "https://t.me/humanreadytech/demo2"
          },
          {
            id: "demo_3",
            text: "–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç –Ω–∞ Next.js –º–æ–∂–Ω–æ –∑–∞ –æ–¥–∏–Ω –≤–µ—á–µ—Ä –≤–æ–æ–±—â–µ –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ä–º—É–ª–∏—Ä—É—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ò–ò. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å–∞–º —Å–æ–∑–¥–∞—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç —Ä–æ—É—Ç–∏–Ω–≥.",
            date: new Date(now.getTime() - 12 * 60 * 60 * 1000).toISOString(), // 12 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
            views: 634,
            link: "https://t.me/humanreadytech/demo3"
          }
        ];
        
        setPosts(mockPosts);
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.");
      }
      
      setLoading(false);
    };

    loadInitialData();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    const interval = setInterval(async () => {
      await fetchTelegramPosts();
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

    return () => clearInterval(interval);
  }, []);

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffHours / 24);

    // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–ª–∏ –≤ –±—É–¥—É—â–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ –¥–∞—Ç—É
    if (isNaN(date.getTime()) || diffMs < 0) {
      return date.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'short',
        hour: '2-digit',
        minute: '2-digit'
      });
    }

    if (diffMinutes < 5) {
      return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    } else if (diffMinutes < 60) {
      return `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    } else if (diffHours < 24) {
      return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    } else if (diffDays < 7) {
      return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
    } else {
      return date.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'short'
      });
    }
  };

  const formatViews = (views: number) => {
    if (views >= 1000) {
      return `${(views / 1000).toFixed(1)}k`;
    }
    return views.toString();
  };

  const extractHashtags = (text: string) => {
    const hashtags = text.match(/#[\w–ê-–Ø–∞-—è—ë]+/g) || [];
    return hashtags.slice(0, 3); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ö–µ—à—Ç–µ–≥–∞
  };

  const getCleanText = (text: string) => {
    // –£–±–∏—Ä–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ –∏–∑ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    return text.replace(/#[\w–ê-–Ø–∞-—è—ë]+/g, '').trim();
  };

  if (loading) {
    return (
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <MessageCircle className="h-5 w-5 text-blue-500" />
            –õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π @humanreadytech
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {[1, 2, 3].map((i) => (
              <div key={i} className="animate-pulse">
                <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                <div className="h-4 bg-gray-200 rounded w-1/2 mb-2"></div>
                <div className="h-3 bg-gray-200 rounded w-1/4"></div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <MessageCircle className="h-5 w-5 text-blue-500" />
          –õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π @humanreadytech
        </CardTitle>
      </CardHeader>
      <CardContent>
        {error && error.includes("–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ") && (
          <Alert className="mb-4">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}
        
        {posts && posts.length > 0 ? (
          <div className="space-y-4">
            {posts.map((post) => (
              <Card key={post.id} className="border-l-4 border-l-blue-500">
                <CardContent className="p-4">
                  <div className="flex justify-between items-start mb-3">
                    <div className="flex items-center gap-2 text-sm text-muted-foreground">
                      <Clock className="h-4 w-4" />
                      {formatDate(post.date)}
                    </div>
                    {post.views && (
                      <div className="flex items-center gap-1 text-sm text-muted-foreground">
                        <Eye className="h-4 w-4" />
                        {formatViews(post.views)}
                      </div>
                    )}
                  </div>
                  
                  <p className="text-sm leading-relaxed mb-3">
                    {getCleanText(post.text)}
                  </p>
                  
                  <div className="flex flex-wrap gap-1 mb-3">
                    {extractHashtags(post.text).map((hashtag, index) => (
                      <Badge key={index} variant="secondary" className="text-xs">
                        {hashtag}
                      </Badge>
                    ))}
                  </div>
                  
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => window.open(post.link, '_blank')}
                    className="text-xs"
                  >
                    <ExternalLink className="h-3 w-3 mr-1" />
                    –ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <div className="text-center py-8">
            <MessageCircle className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
            <p className="text-muted-foreground mb-4">–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
            <Button 
              variant="outline" 
              onClick={() => window.open('https://t.me/humanreadytech', '_blank')}
            >
              <ExternalLink className="h-4 w-4 mr-2" />
              –û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª –≤ Telegram
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
}