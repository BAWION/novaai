import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import DashboardLayout from '@/components/layout/dashboard-layout';
import { CheckCircle, RotateCcw, ArrowLeft } from 'lucide-react';
import { Link } from 'wouter';

interface DraggedItem {
  id: string;
  text: string;
  category: string;
}

interface Category {
  id: string;
  title: string;
  description: string;
  color: string;
  items: DraggedItem[];
}

export default function CardSortDemo() {
  const [draggedItem, setDraggedItem] = useState<DraggedItem | null>(null);
  const [completed, setCompleted] = useState(false);
  const [score, setScore] = useState(0);

  const initialItems: DraggedItem[] = [
    { id: '1', text: '–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü', category: 'bias' },
    { id: '2', text: 'GDPR –∏ 152-–§–ó', category: 'privacy' },
    { id: '3', text: '–û–±—ä—è—Å–Ω–∏–º—ã–µ —Ä–µ—à–µ–Ω–∏—è –ò–ò', category: 'transparency' },
    { id: '4', text: '–î–∞–Ω–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∫–∞—Ä—Ç', category: 'privacy' },
    { id: '5', text: '–ê–ª–≥–æ—Ä–∏—Ç–º –Ω–∞–π–º–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', category: 'bias' },
    { id: '6', text: 'LIME –∏ SHAP –∞–Ω–∞–ª–∏–∑', category: 'transparency' },
    { id: '7', text: '–ì–µ–Ω–¥–µ—Ä–Ω—ã–µ –ø—Ä–µ–¥—Ä–∞—Å—Å—É–¥–∫–∏ –≤ –ò–ò', category: 'bias' },
    { id: '8', text: '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', category: 'privacy' },
    { id: '9', text: '–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –ò–ò', category: 'transparency' }
  ];

  const [availableItems, setAvailableItems] = useState<DraggedItem[]>(initialItems);
  const [categories, setCategories] = useState<Category[]>([
    {
      id: 'bias',
      title: '–ü—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å',
      description: '–í–æ–ø—Ä–æ—Å—ã –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–∏ –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
      color: 'bg-red-600',
      items: []
    },
    {
      id: 'privacy',
      title: '–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
      description: '–ó–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
      color: 'bg-blue-600',
      items: []
    },
    {
      id: 'transparency',
      title: '–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å',
      description: '–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –ò–ò',
      color: 'bg-green-600',
      items: []
    }
  ]);

  const handleDragStart = (item: DraggedItem) => {
    setDraggedItem(item);
  };

  const handleDrop = (categoryId: string) => {
    if (!draggedItem) return;

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    setCategories(prev => prev.map(cat => 
      cat.id === categoryId 
        ? { ...cat, items: [...cat.items, draggedItem] }
        : cat
    ));

    // –£–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    setAvailableItems(prev => prev.filter(item => item.id !== draggedItem.id));
    setDraggedItem(null);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if (availableItems.length === 1) { // –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
      checkCompletion();
    }
  };

  const checkCompletion = () => {
    let correctCount = 0;
    categories.forEach(cat => {
      cat.items.forEach(item => {
        if (item.category === cat.id) {
          correctCount++;
        }
      });
    });

    const totalItems = initialItems.length;
    const percentage = Math.round((correctCount / totalItems) * 100);
    setScore(percentage);
    setCompleted(true);
  };

  const resetActivity = () => {
    setAvailableItems(initialItems);
    setCategories(prev => prev.map(cat => ({ ...cat, items: [] })));
    setCompleted(false);
    setScore(0);
    setDraggedItem(null);
  };

  const removeFromCategory = (categoryId: string, itemId: string) => {
    const item = categories.find(cat => cat.id === categoryId)?.items.find(item => item.id === itemId);
    if (!item) return;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
    setAvailableItems(prev => [...prev, item]);
    
    // –£–±–∏—Ä–∞–µ–º –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    setCategories(prev => prev.map(cat => 
      cat.id === categoryId 
        ? { ...cat, items: cat.items.filter(i => i.id !== itemId) }
        : cat
    ));
  };

  const progress = Math.round(((initialItems.length - availableItems.length) / initialItems.length) * 100);

  return (
    <DashboardLayout title="Card Sort Activity Demo" subtitle="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫">
      <div className="space-y-6">
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="mb-6">
          <Link href="/ai-ethics-v2">
            <Button variant="ghost" className="text-gray-400 hover:text-white mb-4">
              <ArrowLeft className="h-4 w-4 mr-2" />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å—É
            </Button>
          </Link>
        </div>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å */}
        <Card className="bg-gradient-to-r from-purple-900 to-blue-900 border-purple-800">
          <CardHeader>
            <div className="flex justify-between items-center">
              <div>
                <CardTitle className="text-2xl text-white">–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —ç—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤</CardTitle>
                <p className="text-purple-200 mt-2">
                  –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç—Ç–∏–∫–∏ –ò–ò
                </p>
              </div>
              <Button onClick={resetActivity} variant="outline" className="border-purple-400 text-purple-200">
                <RotateCcw className="h-4 w-4 mr-2" />
                –°–±—Ä–æ—Å–∏—Ç—å
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex justify-between text-sm text-purple-200">
                <span>–ü—Ä–æ–≥—Ä–µ—Å—Å: {initialItems.length - availableItems.length}/{initialItems.length}</span>
                <span>{progress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</span>
              </div>
              <Progress value={progress} className="h-2" />
            </div>
          </CardContent>
        </Card>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
        {completed && (
          <Card className="bg-green-900 border-green-700">
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <CheckCircle className="h-8 w-8 text-green-400" />
                  <div>
                    <h3 className="text-xl font-bold text-white">–ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</h3>
                    <p className="text-green-200">–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</p>
                  </div>
                </div>
                <Badge className="bg-green-600 text-white px-4 py-2 text-lg">
                  {score >= 80 ? '–û—Ç–ª–∏—á–Ω–æ!' : score >= 60 ? '–•–æ—Ä–æ—à–æ!' : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'}
                </Badge>
              </div>
            </CardContent>
          </Card>
        )}

        <div className="grid lg:grid-cols-2 gap-6">
          {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
          <Card className="bg-gray-800 border-gray-700">
            <CardHeader>
              <CardTitle className="text-white">–ö–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</CardTitle>
              <p className="text-gray-400">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</p>
            </CardHeader>
            <CardContent>
              <div className="grid gap-3">
                {availableItems.map((item) => (
                  <div
                    key={item.id}
                    draggable
                    onDragStart={() => handleDragStart(item)}
                    className="p-3 bg-gray-700 rounded-lg border-2 border-dashed border-gray-600 hover:border-blue-500 cursor-move transition-colors"
                  >
                    <span className="text-white font-medium">{item.text}</span>
                  </div>
                ))}
                {availableItems.length === 0 && (
                  <div className="text-center py-8 text-gray-400">
                    –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã! üéâ
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          <div className="space-y-4">
            {categories.map((category) => (
              <Card key={category.id} className="bg-gray-800 border-gray-700">
                <CardHeader className="pb-3">
                  <div className="flex items-center space-x-3">
                    <div className={`w-4 h-4 rounded-full ${category.color}`}></div>
                    <div>
                      <CardTitle className="text-white text-lg">{category.title}</CardTitle>
                      <p className="text-gray-400 text-sm">{category.description}</p>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div
                    className="min-h-[120px] p-4 border-2 border-dashed border-gray-600 rounded-lg space-y-2"
                    onDragOver={(e) => e.preventDefault()}
                    onDrop={() => handleDrop(category.id)}
                  >
                    {category.items.length === 0 ? (
                      <div className="flex items-center justify-center h-full text-gray-500">
                        –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—é–¥–∞
                      </div>
                    ) : (
                      category.items.map((item) => (
                        <div
                          key={item.id}
                          className={`p-2 rounded border ${
                            item.category === category.id 
                              ? 'bg-green-700 border-green-600' 
                              : 'bg-red-700 border-red-600'
                          } cursor-pointer hover:opacity-80`}
                          onClick={() => removeFromCategory(category.id, item.id)}
                        >
                          <span className="text-white text-sm">{item.text}</span>
                          {item.category === category.id && (
                            <CheckCircle className="h-4 w-4 text-green-300 inline ml-2" />
                          )}
                        </div>
                      ))
                    )}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <Card className="bg-gray-800 border-gray-700">
          <CardContent className="pt-6">
            <h4 className="text-lg font-semibold text-white mb-3">–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:</h4>
            <div className="grid md:grid-cols-3 gap-4 text-sm">
              <div className="flex items-start space-x-2">
                <span className="text-blue-400 font-bold">1.</span>
                <span className="text-gray-300">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∏–∑ –ª–µ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞</span>
              </div>
              <div className="flex items-start space-x-2">
                <span className="text-blue-400 font-bold">2.</span>
                <span className="text-gray-300">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –µ—ë –≤ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</span>
              </div>
              <div className="flex items-start space-x-2">
                <span className="text-blue-400 font-bold">3.</span>
                <span className="text-gray-300">–ó–µ–ª–µ–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ - –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∫—Ä–∞—Å–Ω—ã–µ - –∏—Å–ø—Ä–∞–≤—å—Ç–µ</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </DashboardLayout>
  );
}
