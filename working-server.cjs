/**
 * –†–∞–±–æ—á–∏–π –µ–¥–∏–Ω—ã–π —Å–µ—Ä–≤–µ—Ä NovaAI University
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç API –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ –ø–æ—Ä—Ç—É 5000
 */

const express = require('express');
const path = require('path');
const fs = require('fs');
const session = require('express-session');
const MemoryStore = require('memorystore')(session);

const app = express();
const PORT = 5000;

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const users = new Map();

// Middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
app.use(session({
  secret: 'novaai-secret-key',
  resave: false,
  saveUninitialized: false,
  store: new MemoryStore({
    checkPeriod: 86400000 // 24 —á–∞—Å–∞
  }),
  cookie: {
    secure: false,
    httpOnly: true,
    maxAge: 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞
  }
}));

// CORS
app.use((req, res, next) => {
  const origin = req.headers.origin || `${req.protocol}://${req.get('host')}`;
  res.header('Access-Control-Allow-Origin', origin);
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  res.header('Access-Control-Allow-Credentials', 'true');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).send();
  }
  next();
});

// API Routes

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/auth/register', (req, res) => {
  try {
    const { username, email, password } = req.body;
    
    if (!username || !email || !password) {
      return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    
    if (users.has(email)) {
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    
    const user = {
      id: Date.now(),
      username: username.trim(),
      email: email.trim().toLowerCase(),
      password,
      createdAt: new Date().toISOString()
    };
    
    users.set(user.email, user);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
    req.session.userId = user.id;
    req.session.userEmail = user.email;
    
    console.log(`[AUTH] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${user.email} (ID: ${user.id})`);
    
    res.json({
      success: true,
      user: { 
        id: user.id, 
        username: user.username, 
        email: user.email 
      }
    });
  } catch (error) {
    console.error('[AUTH] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –í—Ö–æ–¥
app.post('/api/auth/login', (req, res) => {
  try {
    const { email, password } = req.body;
    
    if (!email || !password) {
      return res.status(400).json({ error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    
    const userEmail = email.trim().toLowerCase();
    const user = users.get(userEmail);
    
    if (!user || user.password !== password) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
    req.session.userId = user.id;
    req.session.userEmail = user.email;
    
    console.log(`[AUTH] –í—Ö–æ–¥: ${user.email} (ID: ${user.id})`);
    
    res.json({
      success: true,
      user: { 
        id: user.id, 
        username: user.username, 
        email: user.email 
      }
    });
  } catch (error) {
    console.error('[AUTH] –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.get('/api/auth/me', (req, res) => {
  try {
    if (!req.session.userId || !req.session.userEmail) {
      return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
    }
    
    const user = users.get(req.session.userEmail);
    if (!user) {
      req.session.destroy(() => {});
      return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json({
      success: true,
      user: { 
        id: user.id, 
        username: user.username, 
        email: user.email 
      }
    });
  } catch (error) {
    console.error('[AUTH] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –í—ã—Ö–æ–¥
app.post('/api/auth/logout', (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      console.error('[AUTH] –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', err);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞' });
    }
    res.json({ success: true, message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω' });
  });
});

// –ö—É—Ä—Å—ã
app.get('/api/courses', (req, res) => {
  res.json({
    success: true,
    courses: [
      {
        id: 1,
        title: "AI Literacy 101",
        description: "–û—Å–Ω–æ–≤—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
        duration: "120 –º–∏–Ω—É—Ç",
        modules: 8,
        lessons: 15
      },
      {
        id: 2,
        title: "Python Basics",
        description: "–ò–∑—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python",
        duration: "240 –º–∏–Ω—É—Ç",
        modules: 6,
        lessons: 12
      },
      {
        id: 3,
        title: "Skills DNA Navigator",
        description: "–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
        duration: "60 –º–∏–Ω—É—Ç",
        modules: 3,
        lessons: 7
      }
    ]
  });
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ dist
app.use(express.static(path.join(__dirname, 'dist')));

// Fallback –¥–ª—è SPA
app.get('*', (req, res) => {
  const indexPath = path.join(__dirname, 'dist', 'index.html');
  
  if (fs.existsSync(indexPath)) {
    res.sendFile(indexPath);
  } else {
    res.status(503).send(`
      <html>
        <body style="font-family: system-ui; padding: 40px; text-align: center;">
          <h1>üöß NovaAI University</h1>
          <p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.</p>
          <p><a href="/">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</a></p>
        </body>
      </html>
    `);
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
  console.log(`\nüöÄ NovaAI University Server –∑–∞–ø—É—â–µ–Ω!`);
  console.log(`üìç –ê–¥—Ä–µ—Å: http://0.0.0.0:${PORT}`);
  console.log(`‚úÖ API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`);
  console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}`);
  console.log(`\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:`);
  console.log(`   POST /api/auth/register`);
  console.log(`   POST /api/auth/login`); 
  console.log(`   GET  /api/auth/me`);
  console.log(`   POST /api/auth/logout`);
  console.log(`   GET  /api/courses`);
  console.log(`\n‚ö° –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã!\n`);
});