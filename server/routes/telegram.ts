import { Router } from 'express';
import fetch from 'node-fetch';

const router = Router();

// –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const CHANNEL_USERNAME = 'humanreadytech';

interface TelegramPost {
  id: string;
  text: string;
  date: string;
  views?: number;
  link: string;
  media?: {
    type: 'photo' | 'video';
    url: string;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–Ω–∞–ª–∞ (Web Scraping)
async function scrapeChannelPosts(channelName: string, limit: number = 10): Promise<TelegramPost[]> {
  try {
    const response = await fetch(`https://t.me/s/${channelName}`);
    if (!response.ok) {
      throw new Error(`Failed to fetch channel page: ${response.statusText}`);
    }
    
    const html = await response.text();
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ HTML –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
    const posts: TelegramPost[] = [];
    
    // –ò—â–µ–º –±–ª–æ–∫–∏ —Å –ø–æ—Å—Ç–∞–º–∏ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    const postRegex = /<div class="tgme_widget_message.*?data-post="[^"]+\/(\d+)".*?<div class="tgme_widget_message_text[^>]*>(.*?)<\/div>.*?<time[^>]*datetime="([^"]+)"/gs;
    
    let match;
    let postCount = 0;
    
    while ((match = postRegex.exec(html)) && postCount < limit) {
      const messageId = match[1];
      const textContent = match[2]?.replace(/<[^>]*>/g, '').trim(); // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
      const dateStr = match[3];
      
      if (textContent && textContent.length > 10) { // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ—Å—Ç—ã
        posts.push({
          id: messageId,
          text: textContent,
          date: new Date(dateStr).toISOString(),
          link: `https://t.me/${channelName}/${messageId}`,
          views: undefined
        });
        postCount++;
      }
    }
    
    return posts.reverse(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    
  } catch (error) {
    console.error('Error scraping channel posts:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞
async function fetchTelegramChannelPosts(channelName: string, limit: number = 10): Promise<TelegramPost[]> {
  if (!TELEGRAM_BOT_TOKEN) {
    throw new Error('TELEGRAM_BOT_TOKEN not configured');
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
    const channelResponse = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getChat?chat_id=@${channelName}`
    );
    
    if (!channelResponse.ok) {
      console.log(`Telegram API getChat failed, trying web scraping...`);
      return await scrapeChannelPosts(channelName, limit);
    }

    // –ü–æ–ª—É—á–∞–µ–º webhook updates (–Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    const updatesResponse = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates?allowed_updates=["channel_post"]&limit=${limit}`
    );
    
    if (!updatesResponse.ok) {
      console.log(`Telegram API getUpdates failed, trying web scraping...`);
      return await scrapeChannelPosts(channelName, limit);
    }

    const updatesData = await updatesResponse.json() as any;
    
    if (!updatesData.ok) {
      console.log(`Telegram API error: ${updatesData.description}, trying web scraping...`);
      return await scrapeChannelPosts(channelName, limit);
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç TelegramPost
    const posts: TelegramPost[] = updatesData.result
      .filter((update: any) => 
        update.channel_post && 
        update.channel_post.chat.username === channelName &&
        update.channel_post.text
      )
      .map((update: any) => {
        const post = update.channel_post;
        return {
          id: post.message_id.toString(),
          text: post.text,
          date: new Date(post.date * 1000).toISOString(),
          views: post.views || undefined,
          link: `https://t.me/${channelName}/${post.message_id}`,
          media: post.photo || post.video ? {
            type: post.photo ? 'photo' : 'video',
            url: post.photo ? `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${post.photo[0].file_path}` : ''
          } : undefined
        };
      })
      .slice(0, limit);

    // –ï—Å–ª–∏ —á–µ—Ä–µ–∑ API –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏, –ø—Ä–æ–±—É–µ–º web scraping
    if (posts.length === 0) {
      console.log('No posts from Telegram API, trying web scraping...');
      return await scrapeChannelPosts(channelName, limit);
    }

    return posts;

  } catch (error) {
    console.error('Error fetching Telegram posts via API, trying web scraping:', error);
    return await scrapeChannelPosts(channelName, limit);
  }
}

// GET /api/telegram/channel/:channelName/posts
router.get('/channel/:channelName/posts', async (req, res) => {
  try {
    const { channelName } = req.params;
    const limit = parseInt(req.query.limit as string) || 10;

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
    if (channelName === 'humanreadytech' && TELEGRAM_BOT_TOKEN) {
      try {
        const posts = await fetchTelegramChannelPosts(channelName, limit);
        
        const sourceType = posts.length > 0 && posts[0].views ? 'telegram-api' : 'web-scraping';
        
        res.json({
          success: true,
          channel: channelName,
          posts: posts,
          total: posts.length,
          source: sourceType
        });
        return;
      } catch (telegramError) {
        console.error('Telegram API error, falling back to mock data:', telegramError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API
      }
    }

    // Fallback –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    if (channelName === 'humanreadytech') {
      const mockPosts: TelegramPost[] = [
        {
          id: "1",
          text: "üöÄ –ù–æ–≤—ã–π –ø—Ä–æ—Ä—ã–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò: OpenAI –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ GPT-5 —Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è. –ú–æ–¥–µ–ª—å —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏.\n\n#–ò–ò #OpenAI #GPT5 #–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
          date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
          views: 1250,
          link: "https://t.me/humanreadytech/1"
        },
        {
          id: "2", 
          text: "üìä –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–ª–æ, —á—Ç–æ 78% –∫–æ–º–ø–∞–Ω–∏–π –ø–ª–∞–Ω–∏—Ä—É—é—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –ò–ò –≤ 2025 –≥–æ–¥—É. –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (45%)\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ (32%)\n‚Ä¢ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (28%)\n‚Ä¢ –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (25%)\n\n#–ë–∏–∑–Ω–µ—Å–ò–ò #–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ #–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
          date: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(), // 5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
          views: 890,
          link: "https://t.me/humanreadytech/2"
        },
        {
          id: "3",
          text: "üéØ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –¥–Ω—è: –ü—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ data augmentation! –≠—Ç–æ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –Ω–∞ 15-20% –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n–û—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è:\n‚úÖ –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞\n‚úÖ –ê—É–¥–∏–æ –∞–Ω–∞–ª–∏–∑–∞\n\n#–ú–∞—à–∏–Ω–Ω–æ–µ–û–±—É—á–µ–Ω–∏–µ #DataScience #–ù–µ–π—Ä–æ–Ω–Ω—ã–µ–°–µ—Ç–∏",
          date: new Date(Date.now() - 8 * 60 * 60 * 1000).toISOString(), // 8 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
          views: 634,
          link: "https://t.me/humanreadytech/3"
        },
        {
          id: "4",
          text: "ü§ñ Anthropic –≤—ã–ø—É—Å—Ç–∏–ª–∞ Claude 3.5 Sonnet —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç:\n\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –∫–æ–¥–æ–≤—ã–µ –±–∞–∑—ã\n‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –±–∞–≥–∏\n‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã\n\n–£–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏? –î–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏! üëá\n\n#Claude #Anthropic #–ò–ò–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
          date: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(), // 12 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
          views: 1456,
          link: "https://t.me/humanreadytech/4"
        },
        {
          id: "5",
          text: "üìà –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Ä—ã–Ω–æ–∫ –ò–ò-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—ã—Ä–æ—Å –Ω–∞ 240% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥. –õ—é–¥–∏ –∞–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—é—Ç:\n\n1. Prompt Engineering (35%)\n2. Machine Learning –æ—Å–Ω–æ–≤—ã (28%)\n3. Computer Vision (18%)\n4. NLP (12%)\n5. –≠—Ç–∏–∫–∞ –ò–ò (7%)\n\n–ê —á—Ç–æ –∏–∑—É—á–∞–µ—Ç–µ –≤—ã? üéì\n\n#–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–ò–ò #–û–±—É—á–µ–Ω–∏–µ #CareerInAI",
          date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
          views: 723,
          link: "https://t.me/humanreadytech/5"
        }
      ];

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
      const limitedPosts = mockPosts.slice(0, limit);
      
      res.json({
        success: true,
        channel: channelName,
        posts: limitedPosts,
        total: mockPosts.length,
        source: 'mock-data'
      });
    } else {
      res.status(404).json({
        success: false,
        message: `Channel @${channelName} not found or not configured`
      });
    }
  } catch (error) {
    console.error('Error fetching Telegram posts:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to fetch Telegram posts'
    });
  }
});

// GET /api/telegram/channel/:channelName/info
router.get('/channel/:channelName/info', async (req, res) => {
  try {
    const { channelName } = req.params;

    if (channelName === 'humanreadytech') {
      res.json({
        success: true,
        channel: {
          name: 'humanreadytech',
          title: 'Human Ready Tech',
          description: '–ö–∞–Ω–∞–ª –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ –±—É–¥—É—â–µ–µ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞',
          subscribers: '2.1k',
          link: 'https://t.me/humanreadytech',
          verified: false,
          avatar: null
        }
      });
    } else {
      res.status(404).json({
        success: false,
        message: `Channel @${channelName} not found`
      });
    }
  } catch (error) {
    console.error('Error fetching channel info:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to fetch channel info'
    });
  }
});

export default router;