/**
 * –°—Ç–∞–±–∏–ª—å–Ω—ã–π –µ–¥–∏–Ω—ã–π —Å–µ—Ä–≤–µ—Ä NovaAI University —Å –Ω–∞–¥–µ–∂–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 * –†–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å Vite –Ω–∞ –ø–æ—Ä—Ç—É 5000
 */

const express = require('express');
const session = require('express-session');
const MemoryStore = require('memorystore')(session);
const cors = require('cors');

const app = express();
const PORT = 5000;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const users = new Map([
  ['admin@novaai.com', {
    id: 1,
    username: 'Admin',
    email: 'admin@novaai.com',
    password: 'admin123',
    role: 'admin',
    createdAt: new Date().toISOString()
  }],
  ['demo@novaai.com', {
    id: 2,
    username: 'Demo User',
    email: 'demo@novaai.com',
    password: 'demo123',
    role: 'student',
    createdAt: new Date().toISOString()
  }]
]);

// Middleware
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Vite –Ω–∞ 5173
app.use(cors({
  origin: [
    'http://localhost:5173',
    'http://127.0.0.1:5173',
    /\.replit\.dev$/,
    /\.vercel\.app$/
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
app.use(session({
  secret: 'novaai-university-secret-2025',
  resave: false,
  saveUninitialized: false,
  store: new MemoryStore({
    checkPeriod: 86400000
  }),
  cookie: {
    secure: false,
    httpOnly: true,
    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 –¥–Ω–µ–π
    sameSite: 'lax'
  }
}));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${req.method} ${req.path}`);
  next();
});

// Health check
app.get('/api/health', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    users: users.size,
    message: 'NovaAI University API Server running'
  });
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/auth/register', (req, res) => {
  try {
    const { username, email, password } = req.body;
    
    console.log(`[AUTH] –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${email}`);
    
    if (!username?.trim() || !email?.trim() || !password?.trim()) {
      return res.status(400).json({ 
        success: false,
        error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
      });
    }
    
    const normalizedEmail = email.trim().toLowerCase();
    
    if (users.has(normalizedEmail)) {
      return res.status(400).json({ 
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' 
      });
    }
    
    const user = {
      id: Date.now(),
      username: username.trim(),
      email: normalizedEmail,
      password: password.trim(),
      role: 'student',
      createdAt: new Date().toISOString()
    };
    
    users.set(normalizedEmail, user);
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    req.session.userId = user.id;
    req.session.userEmail = user.email;
    req.session.username = user.username;
    
    console.log(`[AUTH] –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${user.email} (ID: ${user.id})`);
    
    res.json({
      success: true,
      user: { 
        id: user.id, 
        username: user.username, 
        email: user.email,
        role: user.role
      },
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    });
  } catch (error) {
    console.error('[AUTH] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({ 
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
app.post('/api/auth/login', (req, res) => {
  try {
    const { email, password } = req.body;
    
    console.log(`[AUTH] –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: ${email}`);
    
    if (!email?.trim() || !password?.trim()) {
      return res.status(400).json({ 
        success: false,
        error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
    }
    
    const normalizedEmail = email.trim().toLowerCase();
    const user = users.get(normalizedEmail);
    
    if (!user || user.password !== password.trim()) {
      console.log(`[AUTH] –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: ${normalizedEmail}`);
      return res.status(401).json({ 
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    req.session.userId = user.id;
    req.session.userEmail = user.email;
    req.session.username = user.username;
    
    console.log(`[AUTH] –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: ${user.email} (ID: ${user.id})`);
    
    res.json({
      success: true,
      user: { 
        id: user.id, 
        username: user.username, 
        email: user.email,
        role: user.role
      },
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    console.error('[AUTH] –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    res.status(500).json({ 
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.get('/api/auth/me', (req, res) => {
  try {
    console.log(`[AUTH] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏: ${req.session.userEmail || '–Ω–µ—Ç —Å–µ—Å—Å–∏–∏'}`);
    
    if (!req.session.userId || !req.session.userEmail) {
      return res.status(401).json({ 
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' 
      });
    }
    
    const user = users.get(req.session.userEmail);
    if (!user) {
      req.session.destroy(() => {});
      return res.status(401).json({ 
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ' 
      });
    }
    
    res.json({
      success: true,
      user: { 
        id: user.id, 
        username: user.username, 
        email: user.email,
        role: user.role
      }
    });
  } catch (error) {
    console.error('[AUTH] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    res.status(500).json({ 
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
app.post('/api/auth/logout', (req, res) => {
  const userEmail = req.session.userEmail;
  req.session.destroy((err) => {
    if (err) {
      console.error('[AUTH] –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', err);
      return res.status(500).json({ 
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' 
      });
    }
    console.log(`[AUTH] –í—ã—Ö–æ–¥: ${userEmail}`);
    res.json({ 
      success: true, 
      message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ' 
    });
  });
});

// –ö—É—Ä—Å—ã (–¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ)
app.get('/api/courses', (req, res) => {
  res.json({
    success: true,
    courses: [
      {
        id: 1,
        title: "AI Literacy 101",
        description: "–û—Å–Ω–æ–≤—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
        duration: "120 –º–∏–Ω—É—Ç",
        modules: 8,
        lessons: 15,
        category: "AI"
      },
      {
        id: 2,
        title: "Python Basics",
        description: "–ò–∑—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python",
        duration: "240 –º–∏–Ω—É—Ç",
        modules: 6,
        lessons: 12,
        category: "Programming"
      },
      {
        id: 3,
        title: "Skills DNA Navigator",
        description: "–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å –ò–ò",
        duration: "60 –º–∏–Ω—É—Ç",
        modules: 3,
        lessons: 7,
        category: "Skills"
      }
    ]
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('/api/*', (req, res) => {
  res.status(404).json({
    success: false,
    error: `API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω: ${req.path}`
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`\nüöÄ NovaAI University API Server –∑–∞–ø—É—â–µ–Ω!`);
  console.log(`üìç –ê–¥—Ä–µ—Å: http://0.0.0.0:${PORT}`);
  console.log(`‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è Vite (–ø–æ—Ä—Ç 5173)`);
  console.log(`üìä –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}`);
  console.log(`\nüìã API Endpoints:`);
  console.log(`   GET  /api/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è`);
  console.log(`   POST /api/auth/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è`);
  console.log(`   POST /api/auth/login - –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É`); 
  console.log(`   GET  /api/auth/me - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
  console.log(`   POST /api/auth/logout - –í—ã—Ö–æ–¥`);
  console.log(`   GET  /api/courses - –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤`);
  console.log(`\nüéØ –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:`);
  console.log(`   admin@novaai.com / admin123 (–∞–¥–º–∏–Ω)`);
  console.log(`   demo@novaai.com / demo123 (—Å—Ç—É–¥–µ–Ω—Ç)`);
  console.log(`\n‚ö° API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
server.on('error', (err) => {
  if (err.code === 'EADDRINUSE') {
    console.log(`‚ùå –ü–æ—Ä—Ç ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`);
    process.exit(1);
  } else {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    process.exit(1);
  }
});

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
process.on('SIGTERM', () => {
  console.log('\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});