/**
 * –¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ ‚Üí –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚Üí –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
 */

const http = require('http');
const querystring = require('querystring');

const BASE_URL = process.env.BASE_URL || 'http://localhost:5000';

function makeRequest(method, path, data = null, cookies = '') {
  return new Promise((resolve, reject) => {
    const url = new URL(path, BASE_URL);
    const options = {
      hostname: url.hostname,
      port: url.port,
      path: url.pathname + url.search,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Cookie': cookies
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });

      res.on('end', () => {
        try {
          const result = {
            statusCode: res.statusCode,
            headers: res.headers,
            data: body ? JSON.parse(body) : null
          };
          resolve(result);
        } catch (e) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: body
          });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

function extractCookies(result) {
  const setCookieHeader = result.headers['set-cookie'];
  if (setCookieHeader) {
    return setCookieHeader.map(cookie => cookie.split(';')[0]).join('; ');
  }
  return '';
}

async function testSessionRecovery() {
  console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
  console.log('=' + '='.repeat(79));
  
  try {
    const timestamp = Date.now();
    const testUser = {
      username: `test_session_${timestamp}`,
      password: "test123",
      displayName: "Test Session User",
      email: `test_session_${timestamp}@example.com`
    };

    // –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìù –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const registrationResult = await makeRequest('POST', '/api/auth/register', testUser);
    
    console.log('–°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registrationResult.statusCode);
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', registrationResult.data);
    
    if (registrationResult.statusCode !== 201) {
      throw new Error(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${registrationResult.statusCode}`);
    }

    const cookies = extractCookies(registrationResult);
    console.log('–ü–æ–ª—É—á–µ–Ω—ã cookies:', cookies ? '–¥–∞' : '–Ω–µ—Ç');

    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('\nüîç –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    const authCheckResult = await makeRequest('GET', '/api/auth/me', null, cookies);
    
    console.log('–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏:', authCheckResult.statusCode);
    console.log('–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', authCheckResult.data);

    if (authCheckResult.statusCode === 200) {
      console.log('‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      
      // –®–∞–≥ 3: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.log('\nüíæ –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π');
      const diagnosisData = {
        userId: registrationResult.data.id,
        skills: {
          "Python": 75,
          "Machine Learning": 60,
          "Data Analysis": 80
        },
        diagnosticType: "quick",
        metadata: { source: "session_recovery_test" }
      };

      const diagnosisResult = await makeRequest('POST', '/api/diagnosis/results', diagnosisData, cookies);
      console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', diagnosisResult.statusCode);
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', diagnosisResult.data);

      if (diagnosisResult.statusCode === 200 || diagnosisResult.statusCode === 201) {
        console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        
        // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüìä –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
        const progressResult = await makeRequest('GET', `/api/diagnosis/progress/${registrationResult.data.id}`, null, cookies);
        console.log('–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', progressResult.statusCode);
        console.log('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', progressResult.data);

        if (progressResult.statusCode === 200 && progressResult.data.length > 0) {
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        } else {
          console.log('‚ùå –î–∞–Ω–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', diagnosisResult.data);
      }
    } else {
      console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      
      // –®–∞–≥ 3–±: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
      console.log('\nüíæ –®–∞–≥ 3–±: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–µ—Å—Å–∏–∏');
      const diagnosisData = {
        userId: registrationResult.data.id,
        skills: {
          "Python": 75,
          "Machine Learning": 60,
          "Data Analysis": 80
        },
        diagnosticType: "quick",
        metadata: { source: "cache_test" }
      };

      const diagnosisResult = await makeRequest('POST', '/api/diagnosis/results', diagnosisData);
      console.log('–°—Ç–∞—Ç—É—Å –ø–æ–ø—ã—Ç–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–µ–∑ —Å–µ—Å—Å–∏–∏:', diagnosisResult.statusCode);
      
      if (diagnosisResult.statusCode === 401) {
        console.log('‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ 401 - –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ');
      }
    }

    // –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    console.log('\n' + '='.repeat(80));
    console.log('–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –°–ï–°–°–ò–ò:');
    console.log('1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    console.log('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    console.log('3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    console.log('4. –ú–µ—Ö–∞–Ω–∏–∑–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä–µ–Ω');
    console.log('\n–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testSessionRecovery().then(() => {
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}).catch((error) => {
  console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
});