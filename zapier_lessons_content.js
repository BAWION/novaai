/**
 * Создание уроков для модуля "Автоматизация с Zapier" курса No-Code AI
 */

const fetch = require('node-fetch');

const BASE_URL = process.env.BASE_URL || 'http://localhost:3000';

async function makeRequest(method, path, data = null) {
  const url = `${BASE_URL}${path}`;
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
    },
  };

  if (data) {
    options.body = JSON.stringify(data);
  }

  try {
    const response = await fetch(url, options);
    const result = await response.json();
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${JSON.stringify(result)}`);
    }
    
    return result;
  } catch (error) {
    console.error(`Error ${method} ${path}:`, error.message);
    throw error;
  }
}

async function createZapierLessons() {
  console.log('Создание уроков для модуля "Автоматизация с Zapier"...');
  
  const moduleId = 38; // ID модуля "Автоматизация с Zapier"
  
  const lessons = [
    {
      moduleId,
      title: "Основы работы с Zapier",
      description: "Знакомство с платформой Zapier, создание первого Zap",
      content: `# Основы работы с Zapier

## Что такое Zapier

Zapier — это платформа автоматизации, которая соединяет различные веб-приложения и позволяет автоматически передавать данные между ними без программирования.

### Ключевые концепции

**Zap (Зап)** — автоматизированный workflow, состоящий из:
- **Триггера** — событие, которое запускает автоматизацию
- **Действий** — что происходит после триггера

**Приложения** — сервисы, которые можно подключить (Gmail, Slack, Google Sheets, Trello и 5000+ других)

## Создание первого Zap

### Шаг 1: Выбор триггера
1. Войдите в Zapier и нажмите "Create Zap"
2. Выберите приложение-триггер (например, Gmail)
3. Выберите событие ("New Email" для Gmail)
4. Подключите аккаунт Gmail через OAuth
5. Настройте фильтры (например, только письма с определенной темой)

### Шаг 2: Настройка действия
1. Выберите приложение для действия (например, Google Sheets)
2. Выберите действие ("Create Spreadsheet Row")
3. Подключите Google Sheets аккаунт
4. Настройте маппинг данных:
   - Тема письма → Колонка A
   - Отправитель → Колонка B
   - Дата → Колонка C

### Шаг 3: Тестирование и активация
1. Протестируйте Zap с реальными данными
2. Проверьте результат в Google Sheets
3. Активируйте Zap для автоматической работы

## Практическое задание

Создайте Zap для автоматизации:
- **Триггер**: Новая форма в Google Forms
- **Действие**: Создание карточки в Trello
- **Бонус**: Отправка уведомления в Slack

## Полезные советы

### Фильтры и условия
- Используйте фильтры для обработки только нужных данных
- Настройте условия "только если" для сложной логики

### Форматирование данных
- Используйте встроенные функции для форматирования текста
- Преобразуйте даты в нужный формат
- Объединяйте поля для создания составных значений

### Управление ошибками
- Настройте уведомления об ошибках
- Используйте задержки для работы с медленными API
- Добавьте резервные действия

## Лимиты бесплатного плана
- 100 задач в месяц
- Однозадачные Zap-ы (триггер + 1 действие)
- Базовые приложения

## Следующие шаги
В следующем уроке изучим создание многоэтапных Zap-ов и продвинутые техники автоматизации.`
    },
    
    {
      moduleId,
      title: "Многоэтапные Zap-ы и фильтрация",
      description: "Создание сложных автоматизаций с несколькими действиями и условной логикой",
      content: `# Многоэтапные Zap-ы и фильтрация

## Многоэтапные автоматизации

Платные планы Zapier позволяют создавать Zap-ы с несколькими действиями после одного триггера.

### Пример: Обработка новых лидов

**Триггер**: Новая заявка в веб-форме

**Действия**:
1. Создать контакт в CRM
2. Отправить приветственное письмо
3. Добавить в список рассылки
4. Создать задачу для менеджера
5. Уведомить команду в Slack

### Настройка многоэтапного Zap

1. **Добавление действий**
   - После настройки первого действия нажмите "+ Add Action"
   - Выберите следующее приложение и действие
   - Используйте данные из предыдущих шагов

2. **Передача данных между шагами**
   - Результаты каждого шага доступны в следующих
   - Используйте ID записей для связывания данных
   - Сохраняйте важные значения в переменных

## Фильтры и условная логика

### Основные фильтры

**Filter by Zapier** — встроенный инструмент для условий:
- Продолжить только если условие выполнено
- Поддержка AND/OR логики
- Сравнение чисел, текста, дат

### Примеры условий

**Фильтр по email домену:**
- Поле: email
- Условие: Contains
- Значение: @company.com
- Результат: Обрабатывать только корпоративные email

**Фильтр по сумме сделки:**
- Поле: amount
- Условие: Greater than
- Значение: 1000
- Результат: Уведомлять только о крупных сделках

### Path-ы (Ветвление)

**Paths by Zapier** позволяет создать разные сценарии:

**Путь A**: Если сумма > 10000
- Уведомить директора
- Создать VIP-задачу

**Путь B**: Если сумма < 10000
- Уведомить менеджера
- Создать обычную задачу

## Форматирование и преобразование данных

### Formatter by Zapier

**Текстовые операции**:
- Преобразование регистра (uppercase, lowercase, title case)
- Извлечение подстрок
- Замена символов
- Разделение строк

**Операции с датами**:
- Форматирование дат
- Добавление/вычитание времени
- Преобразование часовых поясов

**Числовые операции**:
- Математические вычисления
- Округление
- Форматирование валют

### Практический пример

**Извлечение домена из email:**
- Исходные данные: "john.doe@company.com"
- Операция: Extract domain
- Результат: "company.com"
- Использование: Создать папку в Google Drive по домену компании

## Утилиты для сложной логики

### Code by Zapier

Для сложных преобразований можно использовать JavaScript или Python:

```javascript
// Пример: Вычисление скидки
const orderAmount = parseFloat(inputData.amount);
let discount = 0;

if (orderAmount > 1000) discount = 0.15;
else if (orderAmount > 500) discount = 0.10;
else if (orderAmount > 100) discount = 0.05;

const finalAmount = orderAmount * (1 - discount);

output = {
  discount_percent: discount * 100,
  final_amount: finalAmount.toFixed(2)
};
```

### Webhooks by Zapier

Интеграция с любым API через HTTP-запросы:
- GET/POST/PUT/DELETE запросы
- Настройка заголовков
- Аутентификация через токены
- Обработка JSON ответов

## Практическое задание

Создайте сложный Zap для интернет-магазина:

**Триггер**: Новый заказ в WooCommerce

**Логика**:
- Если заказ > 500$ → VIP-обработка
- Если заказ < 500$ → Стандартная обработка

**VIP-обработка**:
1. Создать приоритетную задачу в Asana
2. Отправить SMS менеджеру
3. Добавить клиента в VIP-сегмент

**Стандартная обработка**:
1. Создать обычную задачу
2. Отправить email подтверждение
3. Добавить в общий список клиентов

## Мониторинг и отладка

### History (История выполнения)
- Просмотр всех выполненных Zap-ов
- Детали ошибок и их причины
- Повторный запуск неудачных задач

### Общие проблемы и решения

**Ошибка аутентификации**:
- Переподключить аккаунт
- Проверить права доступа

**Неправильное форматирование данных**:
- Использовать Formatter
- Добавить условные проверки

**Превышение лимитов API**:
- Добавить задержки между запросами
- Использовать Digest для группировки

В следующем уроке изучим интеграцию Zapier с ИИ-сервисами и создание умных автоматизаций.`
    },
    
    {
      moduleId,
      title: "Интеграция Zapier с ИИ-сервисами",
      description: "Подключение OpenAI, Claude и других ИИ-платформ через Zapier",
      content: `# Интеграция Zapier с ИИ-сервисами

## OpenAI интеграция

Zapier предоставляет официальное приложение OpenAI для интеграции с GPT моделями.

### Настройка подключения

1. **Получение API ключа**
   - Зайдите на platform.openai.com
   - Создайте API ключ в разделе API keys
   - Скопируйте ключ (начинается с sk-)

2. **Подключение в Zapier**
   - Выберите приложение "OpenAI (GPT-3, DALL-E, Whisper)"
   - Вставьте API ключ
   - Протестируйте подключение

### Основные действия OpenAI

**Send Prompt** — отправка текстового запроса:
- Выбор модели (GPT-4, GPT-3.5-turbo)
- Настройка температуры (0-2)
- Максимальное количество токенов
- System prompt для контекста

**Create Image** — генерация изображений с DALL-E:
- Описание изображения
- Размер (256x256, 512x512, 1024x1024)
- Количество вариантов

**Transcribe Audio** — распознавание речи с Whisper:
- Загрузка аудиофайла
- Выбор языка
- Получение текстовой расшифровки

## Практические сценарии с ИИ

### 1. Автоматический анализ отзывов

**Триггер**: Новый отзыв в Google Forms

**Действия**:
1. **OpenAI Send Prompt**: Анализ тональности
   ```
   System: Ты эксперт по анализу отзывов клиентов
   Prompt: Проанализируй отзыв и определи:
   1. Тональность (позитивная/негативная/нейтральная)
   2. Основные темы
   3. Рекомендации по улучшению
   
   Отзыв: {{text_from_form}}
   ```

2. **Google Sheets**: Сохранить результат анализа
3. **Slack**: Уведомить команду о негативных отзывах

### 2. Умный помощник для email

**Триггер**: Новое письмо в Gmail с определенным лейблом

**Действия**:
1. **OpenAI Send Prompt**: Создать черновик ответа
   ```
   System: Ты профессиональный менеджер по продажам
   Prompt: Создай вежливый и информативный ответ на письмо:
   
   Исходное письмо: {{email_body}}
   Тема: {{email_subject}}
   
   Ответ должен быть профессиональным и решать вопросы клиента.
   ```

2. **Gmail**: Создать черновик с ИИ-ответом
3. **Slack**: Уведомить менеджера о готовом черновике

### 3. Автоматическое создание контента

**Триггер**: Новая строка в Google Sheets с темой статьи

**Действия**:
1. **OpenAI Send Prompt**: Создать план статьи
2. **OpenAI Send Prompt**: Написать введение
3. **OpenAI Send Prompt**: Создать основной контент
4. **Google Docs**: Собрать статью в документ
5. **Trello**: Создать карточку для редактирования

## Работа с Claude через API

Поскольку Anthropic Claude пока нет в официальных приложениях Zapier, используем Webhooks:

### Настройка webhook для Claude

1. **Webhooks by Zapier**: POST запрос
2. **URL**: `https://api.anthropic.com/v1/messages`
3. **Headers**:
   ```
   Content-Type: application/json
   x-api-key: YOUR_CLAUDE_API_KEY
   anthropic-version: 2023-06-01
   ```

4. **Body**:
   ```json
   {
     "model": "claude-3-sonnet-20240229",
     "max_tokens": 1000,
     "messages": [
       {
         "role": "user",
         "content": "{{your_prompt}}"
       }
     ]
   }
   ```

## Продвинутые техники с ИИ

### Цепочки промптов

**Многоэтапная обработка**:
1. Первый ИИ: Извлечь ключевые данные
2. Второй ИИ: Проанализировать данные
3. Третий ИИ: Создать рекомендации

### Контекстные промпты

Используйте данные из CRM для персонализации:
```
System: Ты менеджер по продажам в {{company_name}}
Context: 
- Клиент: {{customer_name}}
- История покупок: {{purchase_history}}
- Предпочтения: {{preferences}}

Prompt: Создай персональное предложение для этого клиента
```

### A/B тестирование промптов

Используйте Filter для случайного выбора:
```javascript
// Code by Zapier
const random = Math.random();
const promptVersion = random > 0.5 ? "version_a" : "version_b";

output = {
  prompt_version: promptVersion,
  selected_prompt: promptVersion === "version_a" ? 
    "Формальный стиль промпта" : 
    "Дружелюбный стиль промпта"
};
```

## Интеграция с другими ИИ-сервисами

### Stable Diffusion через Replicate

```json
{
  "version": "stability-ai/stable-diffusion",
  "input": {
    "prompt": "{{image_description}}",
    "width": 512,
    "height": 512
  }
}
```

### ElevenLabs для синтеза речи

```json
{
  "text": "{{text_to_speak}}",
  "voice_id": "21m00Tcm4TlvDq8ikWAM",
  "model_id": "eleven_monolingual_v1"
}
```

## Мониторинг использования ИИ

### Отслеживание затрат

Создайте Zap для мониторинга:
1. **Trigger**: Каждое использование ИИ
2. **Google Sheets**: Логирование токенов и стоимости
3. **Filter**: Если месячный лимит превышен
4. **Slack**: Уведомление о превышении бюджета

### Анализ эффективности

Отслеживайте:
- Успешность генерации
- Время ответа
- Качество результатов
- ROI от автоматизации

## Практическое задание

Создайте умную систему обработки заявок:

**Триггер**: Новая заявка через форму

**ИИ-обработка**:
1. Классификация типа запроса
2. Определение приоритета
3. Генерация первичного ответа
4. Создание плана действий

**Результат**:
- Автоматический ответ клиенту
- Создание задачи для специалиста
- Уведомление команды с ИИ-анализом

В следующем модуле изучим интеграцию с GPT API напрямую через Make.com и создание более сложных ИИ-автоматизаций.`
    }
  ];

  // Создаем уроки
  for (const lesson of lessons) {
    try {
      console.log(`Создание урока: ${lesson.title}`);
      const result = await makeRequest('POST', '/api/lessons', lesson);
      console.log(`✅ Урок создан с ID: ${result.id}`);
    } catch (error) {
      console.error(`❌ Ошибка создания урока "${lesson.title}":`, error.message);
    }
  }

  console.log('\n✅ Все уроки для модуля "Автоматизация с Zapier" созданы!');
}

// Запуск создания уроков
createZapierLessons().catch(console.error);