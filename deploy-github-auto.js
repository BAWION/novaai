#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ GitHub + Vercel
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º git push
 */

import { execSync } from 'child_process';
import fs from 'fs';
import readline from 'readline';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const log = (msg, color = 'white') => {
  const colors = {
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    red: '\x1b[31m',
    blue: '\x1b[34m',
    white: '\x1b[37m',
    reset: '\x1b[0m'
  };
  console.log(`${colors[color]}${msg}${colors.reset}`);
};

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

async function checkGitRepo() {
  try {
    execSync('git status', { stdio: 'ignore' });
    log('‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω', 'green');
    return true;
  } catch (error) {
    log('‚ö†Ô∏è  Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'yellow');
    return false;
  }
}

async function initGitRepo() {
  log('üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...', 'blue');
  
  try {
    execSync('git init', { stdio: 'inherit' });
    execSync('git add .', { stdio: 'inherit' });
    execSync('git commit -m "Initial NovaAI University commit"', { stdio: 'inherit' });
    log('‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω', 'green');
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è', 'red');
    process.exit(1);
  }
}

async function setupGitHubRemote() {
  const username = await askQuestion('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à GitHub username: ');
  const repoName = await askQuestion('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: novaai-university): ') || 'novaai-university';
  
  const remoteUrl = `https://github.com/${username}/${repoName}.git`;
  
  log(`üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ remote: ${remoteUrl}`, 'blue');
  
  try {
    execSync(`git remote add origin ${remoteUrl}`, { stdio: 'inherit' });
    execSync('git branch -M main', { stdio: 'inherit' });
    log('‚úÖ Remote –Ω–∞—Å—Ç—Ä–æ–µ–Ω', 'green');
    return { username, repoName, remoteUrl };
  } catch (error) {
    log('‚ö†Ô∏è  Remote —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'yellow');
    return { username, repoName, remoteUrl };
  }
}

async function pushToGitHub() {
  log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ GitHub...', 'blue');
  
  try {
    execSync('git push -u origin main', { stdio: 'inherit' });
    log('‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ GitHub', 'green');
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ GitHub', 'red');
    log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:', 'yellow');
    log('1. –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω –Ω–∞ GitHub', 'yellow');
    log('2. –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞', 'yellow');
    log('3. SSH –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ token', 'yellow');
    process.exit(1);
  }
}

function createVercelConfig() {
  const vercelJson = {
    "version": 2,
    "framework": "vite",
    "buildCommand": "npm run build",
    "outputDirectory": "dist",
    "installCommand": "npm install",
    "rewrites": [
      {
        "source": "/api/(.*)",
        "destination": "https://49c11d52-b1fc-4151-bb61-b9097616c44f-00-3h2ne9cwwtbvn.janeway.replit.dev/api/$1"
      }
    ],
    "headers": [
      {
        "source": "/api/(.*)",
        "headers": [
          {
            "key": "Access-Control-Allow-Origin",
            "value": "*"
          },
          {
            "key": "Access-Control-Allow-Methods",
            "value": "GET, POST, PUT, DELETE, PATCH, OPTIONS"
          },
          {
            "key": "Access-Control-Allow-Headers",
            "value": "X-Requested-With, Content-Type, Accept, Authorization"
          }
        ]
      }
    ]
  };

  fs.writeFileSync('vercel.json', JSON.stringify(vercelJson, null, 2));
  log('‚úÖ vercel.json –æ–±–Ω–æ–≤–ª–µ–Ω', 'green');
}

function showVercelInstructions(repoInfo) {
  log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò –í VERCEL:', 'blue');
  log('1. –û—Ç–∫—Ä–æ–π—Ç–µ https://vercel.com/dashboard', 'white');
  log('2. –ù–∞–∂–º–∏—Ç–µ "New Project"', 'white');
  log('3. –í—ã–±–µ—Ä–∏—Ç–µ "Import Git Repository"', 'white');
  log(`4. –ù–∞–π–¥–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${repoInfo.username}/${repoInfo.repoName}`, 'white');
  log('5. –ù–∞–∂–º–∏—Ç–µ "Import"', 'white');
  log('6. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:', 'white');
  log('   - Framework: Vite', 'yellow');
  log('   - Build Command: npm run build', 'yellow');
  log('   - Output Directory: dist', 'yellow');
  log('7. –î–æ–±–∞–≤—å—Ç–µ Environment Variables:', 'white');
  log('   - OPENAI_API_KEY', 'yellow');
  log('   - ANTHROPIC_API_KEY', 'yellow');
  log('8. –ù–∞–∂–º–∏—Ç–µ "Deploy"', 'white');
  
  log('\nüîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø:', 'green');
  log('–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∂–¥—ã–π git push –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç —Å–∞–π—Ç!', 'white');
  
  log('\nüìù –ö–û–ú–ê–ù–î–´ –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø:', 'blue');
  log('git add .', 'yellow');
  log('git commit -m "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"', 'yellow');
  log('git push', 'yellow');
}

async function main() {
  log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ GitHub + Vercel\n', 'blue');
  
  const hasRepo = await checkGitRepo();
  
  if (!hasRepo) {
    await initGitRepo();
  }
  
  const repoInfo = await setupGitHubRemote();
  createVercelConfig();
  
  const shouldPush = await askQuestion('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –Ω–∞ GitHub —Å–µ–π—á–∞—Å? (y/n): ');
  
  if (shouldPush.toLowerCase() === 'y') {
    await pushToGitHub();
  }
  
  showVercelInstructions(repoInfo);
  
  rl.close();
}

main().catch(console.error);